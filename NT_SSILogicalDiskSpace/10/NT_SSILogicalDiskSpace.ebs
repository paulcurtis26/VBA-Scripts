'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### NT_SSILogicalDiskSpace

'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitor if the Logical Disk(s) is getting full

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 24 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const NT_LogicalDiskObj = ""

'### End Type Section

'### Begin KPP Section

'### Author 		: NetIQ
'### Version		: 1.1
'### Description	: Monitors Logical Disk Space 

'### Changed by		: Dayanand Sankar (713) 245-1556 (Property of Shell Services International)
'### Date			: 7/29/97
'### Revision       : 1.1
'### Enhancements 	: -Change to fix false alerts  

'### Changed by		: Dayanand Sankar (713) 245-1556 (Property of Shell Services International)
'### Date			: 6/5/97
'### Revision       : 1.1
'### Enhancements 	: -Change to accomodate 'n' consecutive times of occurrences for disk space exceeding thresholds
'###				  -Initial Clear message and Clear message after a threshold has been 
'###				   reached and then falling below that threshold 'n' consecutive times.
'###				  -Also event messages are formatted to represent 
'###				   Counter, Value and Number with only spaces seperating these three entities.

'[V<CPReady. Disk Util monitors the disk space usage (in %). Free Space indicates the space free (in MB). Event is raised if ANY disk's usage is over Max Disk Utilization (%) OR the free space is below Min Free Space (MB). (Version 1.1)>V]

Const DO_EVENT = "y"			'[M<Event? (y/n)>M] [T<String,1,,"yn">T]
Const DO_DATA = "n"				'[M<Collect Data? (y/n)>M] [T<String,100,,"yn">T]
Const DO_NUMBERS = "y" '[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const DISKS = "C,D,E,F"			'[M<List Disks to Monitor separated by "," w/ no space.>M] [T<String,1000,',',>T]
Const TH_UTIL = "95,95,95,95"	'[M<Max Disk Utilization (%) limit for above disks separated by "," w/ no space.>M] [T<String,1000,',',>T]
Const TH_FREE = "10,10,10,10"	'[M<Min Free Space (MB) for above disks separated by "," w/ no space.>M] [T<String,1000,',',>T]
Const CONSEC_TIME = 3 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const DEF_UTIL = 95				'[M<Other Disk Util > >M] [T<Integer,,, 0, 100, %>T]
Const DEF_FREE = 10				'[M<Other Disk Free Space < >M] [T<Integer,,, 0, 9999, MB>T]
Const Severity = 8				'[M<Event Severity>M] [T<Integer,,,1, 40, SevLevel>T]

'[A<When the disk space is getting full, the selected action is taken.>A]
Const AKPID = "AKP_NULL"	' [M<Action Taken>M]

'### End KPP Section

'### Begin KPS Section

Type DISK_STRUCT
	DiskName As String
	ThresUtil As Double
	ThresFree As Double
	CurrentUtil As Double
	CurrentFree As Double
	ThreshCount As Integer
	ClearCount As Integer
	FirstClearCount As Integer
	NormalClear As Boolean
	FirstClear As Boolean
End Type


Dim NT As Object
Dim OBJ As Object
Dim DiskArray() As DISK_STRUCT
Dim NewDisks () As DISK_STRUCT

Const UNITPERCENT = "^^%"
Const UNITMEGABYTE = "^^MB"



Function AlterString(sString As String, sCharToReplace As String, sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function



Sub CreateDiskArray ()

	Dim DiskCount As Integer
	Dim ObjName As String
	Dim I As Integer
	Dim J As Integer
	Dim DUtil As Double
	Dim DFree As Double
	Dim DUsed As Double
	Dim Count As Integer
	Dim NewCount As Integer
	Dim NewNewCount As Integer

	On Error GoTo HANDEL_ERROR

	DiskCount = ItemCount(NT_LogicalDiskObj, ",")
	If IterationCount() = 1 Then
		ReDim DiskArray(DiskCount)
	Else	
		ReDim Preserve DiskArray(DiskCount)
	End If
	For I = 0 To DiskCount - 1 
		ObjName = Item$(NT_LogicalDiskObj, I + 1,, ",")	
 		DUtil = Obj.CounterValue("LogicalDisk", "% Free Space", ObjName)
		DFree = Obj.CounterValue("LogicalDisk", "Free Megabytes", ObjName)
		If DUtil = -1 Or DFree = -1 Then						'exit if error in calling the MO
			Err.Description = "Failed on Counter/LDisk MO."
			Err.raise 4110	'raise error to terminate this KS
		End If
		If DUtil <> 0 Then
			DUsed = ((DFree * 100) / DUtil) - DFree			'get the used MB
		Else
			DUsed = -1		' currently we didn't get total disk space from MO
		End If
		DUtil = 100 - DUtil	'get the used space %

		If IterationCount() = 1 Then
			DiskArray(I).DiskName = ObjName	
			For J = 1 To ItemCount(DISKS, ",")	
				If UCase$(ObjName) = UCase$(Item$(DISKS, J,, ",") & ":") Then
			   		DiskArray(I).ThresUtil = CDbl(item$(TH_UTIL, J,, ","))
					DiskArray(I).ThresFree = CDbl(item$(TH_FREE, J,, ","))
					Exit For
				Else
			   		DiskArray(I).ThresUtil = DEF_UTIL
					DiskArray(I).ThresFree = DEF_FREE			
				End If
			Next J
			DiskArray(I).CurrentUtil = Dutil
			DiskArray(I).CurrentFree = DFree
			'If DiskArray(I).CurrentUtil > DiskArray(I).ThresUtil Or DiskArray(I).CurrentFree < DiskArray(I).ThresFree Then   	 
			'	DiskArray(I).ThreshCount = 1
			'	DiskArray(I).ClearCount = 0
			'	DiskArray(I).FirstClearCount = 0
			'Else
			'	DiskArray(I).ThreshCount = 0
			'	DiskArray(I).ClearCount = 1
			'	DiskArray(I).FirstClearCount = 1
			'End If
			DiskArray(I).NormalClear = "False"
			DiskArray(I).FirstClear = "False"
		Else
			Count = UBound(DiskArray)
			For J = 0 To Count
				If UCase$(ObjName) = UCase$(DiskArray(J).DiskName) Then
					DiskArray(J).CurrentUtil = Dutil
					DiskArray(J).CurrentFree = DFree
					'If DiskArray(J).CurrentUtil > DiskArray(J).ThresUtil Or DiskArray(J).CurrentFree < DiskArray(J).ThresFree Then   	 
						'DiskArray(J).ThreshCount = DiskArray(J).ThreshCount + 1
						'DiskArray(J).FirstClear = -1
						'If DiskArray(J).ClearCount <> 0 And DiskArray(J).ClearCount < CONSEC_TIME Then
						'	DiskArray(J).ClearCount = 0
						'End If
						'If DiskArray(J).FirstClearCount <> 0 And DiskArray(J).FirstClearCount < CONSEC_TIME Then
						'	DiskArray(J).FirstClearCount = 0
						'End If
					'Else
						'DiskArray(J).ClearCount = DiskArray(J).ClearCount + 1
						'DiskArray(J).FirstClearCount = DiskArray(J).FirstClearCount + 1
						'If DiskArray(J).ThreshCount <> 0 And DiskArray(J).ThreshCount < CONSEC_TIME Then
						'	DiskArray(J).ThreshCount = 0
						'End If
					'End If		
					ReDim Preserve NewDisks(NewCount)
					NewDisks(NewCount).DiskName = DiskArray(J).DiskName
					NewDisks(NewCount).ThresUtil = DiskArray(J).ThresUtil
					NewDisks(NewCount).ThresFree = DiskArray(J).ThresFree
					NewDisks(NewCount).CurrentUtil = DiskArray(J).CurrentUtil
					NewDisks(NewCount).CurrentFree = DiskArray(J).CurrentFree
					NewDisks(NewCount).ThreshCount = DiskArray(J).ThreshCount
					NewDisks(NewCount).ClearCount = DiskArray(J).ClearCount
					NewDisks(NewCount).FirstClearCount = DiskArray(J).FirstClearCount
					NewDisks(NewCount).NormalClear = DiskArray(J).NormalClear
					NewDisks(NewCount).FirstClear = DiskArray(J).FirstClear
					NewCount = NewCount + 1
				End If
			Next J
			If (Not Exists(ObjName)) Then
				NewNewCount = UBound(NewDisks)				
				If Err.Number = 9 Then
					NewNewCount = 0				
				Else
					NewNewCount = NewNewCount + 1
				End If
				NewCount = NewNewCount + 1
				ReDim Preserve NewDisks(NewNewCount)
				NewDisks(NewNewCount).DiskName = ObjName
				NewDisks(NewNewCount).CurrentUtil = Dutil
				NewDisks(NewNewCount).CurrentFree = DFree
				For J = 1 To ItemCount(DISKS, ",")	
					If UCase$(ObjName) = UCase$(Item$(DISKS, J,, ",") & ":") Then
				   		NewDisks(NewNewCount).ThresUtil = CDbl(item$(TH_UTIL, J,, ","))
						NewDisks(NewNewCount).ThresFree = CDbl(item$(TH_FREE, J,, ","))
						Exit For
					Else
				   		NewDisks(NewNewCount).ThresUtil = DEF_UTIL
						NewDisks(NewNewCount).ThresFree = DEF_FREE			
					End If
				Next J
				'If NewDisks(NewNewCount).CurrentUtil > NewDisks(NewNewCount).ThresUtil Or NewDisks(NewNewCount).CurrentFree < NewDisks(NewNewCount).ThresFree Then   	 
				'	NewDisks(NewNewCount).ThreshCount = 1
				'	NewDisks(NewNewCount).ClearCount = 0
				'	NewDisks(NewNewCount).FirstClearCount = 0
				'Else
				'	NewDisks(NewNewCount).ThreshCount = 0
				'	NewDisks(NewNewCount).ClearCount = 1
				'	NewDisks(NewNewCount).FirstClearCount = 1
				'End If
				NewDisks(NewNewCount).NormalClear = "False"
				NewDisks(NewNewCount).FirstClear = "False"
			End If
		End If

		If IterationCount() = 1 And DO_DATA = "y" Then		  	'set up during 1st iteration
			DataHeader "Ldsk: " & ObjName & "USED" & UNITPERCENT, 0, I	'the 1st data stream
			DataHeader "Ldsk: " & ObjName & "AVAIL" & UNITMEGABYTE, 0, I+1000	'the 2nd data stream
		End If
		If DO_DATA = "y" Then							'data collection requested
			Dim datapoint$
			If Dused <> -1 Then
				datapoint = "Used %= " & Format$(Dutil, "0.00") & chr$(10) & _ 'build intelligent data point
					 "Avail %= " & Format$(100 - Dutil, "0.00") & chr$(10) & _
				 	 "Used space MB = " & CStr(Dused)	& chr$(10) & _
				 	 "Free space MB = " & CStr(Dfree)	& chr$(10)
	    	Else
				datapoint = "Used %= " & Format$(Dutil, "0.00") & chr$(10) & _ 'build intelligent data point
					 "Avail %= " & Format$(100 - Dutil, "0.00") & chr$(10) & _ ' "Used space MB = " & CStr(Dused)	& chr$(10) & _
				 	 "Free space MB = " & CStr(Dfree)	& chr$(10)
			End If
		    DataLog I, Dutil, datapoint					'colelct data fro 1st data stream
	        DataLog I+1000, Dfree, datapoint					'collect data for 2nd  data stream
		End If
	
	Next I

Exit Sub
HANDEL_ERROR:

If Err.Number = 9 Then
	Resume Next
End If

End Sub


Sub SwappArrays()

	Dim QCount As Long
	Dim I As Long
		
	If IterationCount() <> 1 Then
		QCount = UBound(NewDisks)
		ReDim DiskArray(QCount) 
		For I = 0 To QCount
			DiskArray(I).DiskName = NewDisks(I).DiskName
			DiskArray(I).ThresUtil = NewDisks(I).ThresUtil
			DiskArray(I).ThresFree = NewDisks(I).ThresFree
			DiskArray(I).CurrentUtil = NewDisks(I).CurrentUtil
			DiskArray(I).CurrentFree = NewDisks(I).CurrentFree
			DiskArray(I).ThreshCount = NewDisks(I).ThreshCount
			DiskArray(I).ClearCount = NewDisks(I).ClearCount
			DiskArray(I).FirstClearCount = NewDisks(I).FirstClearCount			
			DiskArray(I).NormalClear = NewDisks(I).NormalClear			
			DiskArray(I).FirstClear = NewDisks(I).FirstClear			
		Next I
		ReDim NewDisks(0)
	End If
	
End Sub



Sub DisplayEvent()

	Dim Count As Long	
	Dim LongMsg As String
	Dim ShortMsg As String
	Dim ResName As String
	Dim I As Long

	Count = UBound(DiskArray)
	For I = 0 To Count
		ResName = "NT_LogicalDiskObj = " & DiskArray(I).DiskName
		If DO_EVENT = "y" And DiskArray(I).CurrentUtil > DiskArray(I).ThresUtil Or DiskArray(I).CurrentFree < DiskArray(I).ThresFree  Then
			DiskArray(I).ThreshCount = DiskArray(I).ThreshCount + 1
			DiskArray(I).FirstClear = -1
			If DiskArray(I).ClearCount <> 0 And DiskArray(I).ClearCount < CONSEC_TIME Then
				DiskArray(I).ClearCount = 0
			End If
			If DiskArray(I).FirstClearCount <> 0 And DiskArray(I).FirstClearCount < CONSEC_TIME Then
				DiskArray(I).FirstClearCount = 0
			End If
			If DiskArray(I).ThreshCount = CONSEC_TIME Then 
				If DiskArray(I).CurrentUtil > DiskArray(I).ThresUtil Then
					LongMsg = "Disk "  &  DiskArray(I).DiskName & " Used % is " & Format$(DiskArray(I).CurrentUtil, "0.00") & "; >TH = " & CStr(DiskArray(I).ThresUtil) & chr$(10)
					ShortMsg = Format$(DiskArray(I).CurrentUtil, "0.00") & "%"
				End If
				If DiskArray(I).CurrentFree < DiskArray(I).ThresFree Then
					LongMsg = LongMsg &	"Free space MB is " & Format$(DiskArray(I).CurrentFree, "0.00") & "; <TH = " & CStr(DiskArray(I).ThresFree)
					If ShortMsg <> "" Then
						ShortMsg = ShortMsg & "-" & Format$(DiskArray(I).CurrentFree, "0.00") & "MB"
					Else
						ShortMsg = Format$(DiskArray(I).CurrentFree, "0.00") & "MB"
					End If
				End If
				If DO_NUMBERS = "y" Then
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk " & DiskArray(I).DiskName & " Full", " " , "-") & " " & ShortMsg
				Else
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk " & DiskArray(I).DiskName & " Full", " " , "-") & " NULL"
				End If				
				MSActions SEVERITY, ShortMsg, AKPID, ResName, LongMsg
				DiskArray(I).NormalClear = "True"
				DiskArray(I).ClearCount = 0
				DiskArray(I).FirstClearCount = 0
			End If
		ElseIf DO_EVENT = "y" And DiskArray(I).CurrentUtil < DiskArray(I).ThresUtil Or DiskArray(I).CurrentFree > DiskArray(I).ThresFree Then
			
			DiskArray(I).ClearCount = DiskArray(I).ClearCount + 1
			DiskArray(I).FirstClearCount = DiskArray(I).FirstClearCount + 1
			If DiskArray(I).ThreshCount <> 0 And DiskArray(I).ThreshCount < CONSEC_TIME Then
				DiskArray(I).ThreshCount = 0
			End If

 			If DiskArray(I).FirstClearCount = CONSEC_TIME And DiskArray(I).NormalClear <> -1 And DiskArray(I).FirstClear <> -1 Then
				LongMsg = "Disk "  &  DiskArray(I).DiskName & " Used % is " & Format$(DiskArray(I).CurrentUtil, "0.00") & "; <TH = " & CStr(DiskArray(I).ThresUtil) & chr$(10)
				LongMsg = LongMsg &	"Free space MB is " & Format$(DiskArray(I).CurrentFree, "0.00") & "; >TH = " & CStr(DiskArray(I).ThresFree)
				ShortMsg = Format$(DiskArray(I).CurrentUtil, "0.00") & "%-" & Format$(DiskArray(I).CurrentFree, "0.00") & "MB"
				If DO_NUMBERS = "y" Then
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk "  &  DiskArray(I).DiskName & " Utilization Normal", " ", "-") & " " & ShortMsg
				Else
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk "  &  DiskArray(I).DiskName & " Utilization Normal", " ", "-")
				End If
				MSActions 40, ShortMsg, AKPID, ResName, LongMsg
				DiskArray(I).NormalClear = "False"
				DiskArray(I).ThreshCount = 0
				DiskArray(I).FirstClearCount = 0
				DiskArray(I).FirstClear = "True"
			End If
			If DiskArray(I).ClearCount = CONSEC_TIME And DiskArray(I).NormalClear Then
				LongMsg = "Disk "  &  DiskArray(I).DiskName & " Used % is " & Format$(DiskArray(I).CurrentUtil, "0.00") & "; <TH = " & CStr(DiskArray(I).ThresUtil) & chr$(10)
				LongMsg = LongMsg &	"Free space MB is " & Format$(DiskArray(I).CurrentFree, "0.00") & "; >TH = " & CStr(DiskArray(I).ThresFree)
				ShortMsg = Format$(DiskArray(I).CurrentUtil, "0.00") & "%-" & Format$(DiskArray(I).CurrentFree, "0.00") & "MB"
				If DO_NUMBERS = "y" Then
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk "  &  DiskArray(I).DiskName & " Utilization Normal", " ", "-") & " " & ShortMsg
				Else
					ShortMsg = "LogicalDisk" & " " & AlterString("Disk "  &  DiskArray(I).DiskName & " Utilization Normal", " ", "-")
				End If
				MSActions 40, ShortMsg, AKPID, ResName, LongMsg
				DiskArray(I).NormalClear = "False"
				DiskArray(I).ThreshCount = 0
				DiskArray(I).FirstClearCount = 0
				DiskArray(I).FirstClear = "True"
			End If					
		End If
	Next I

End Sub


Function Exists(ByRef sDisk As String) As Variant
	
	Dim nDiskCount As Integer
	Dim I As Integer
	nDiskCount = UBound(DiskArray)

	Exists = False
	For I = 0 To nDiskCount
		If sDisk = DiskArray(I).DiskName Then
			Exists = True
			Exit For
		End If
	Next I

End Function

Sub Main()

	Set NT = CreateObject("NetiQAgent.NT")
	Set OBJ = NT.System
	
	' Create a array of all disks and their thresholds limits to accomodate for both MB free and % used

	CreateDiskArray

	' Swapp DiskArray with the NewDiska Array
	
	SwappArrays

	' Display events 

	DisplayEvent

End Sub


'### End KPS Section


