'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSINearMaxLocks

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the Available Locks, when Available Locks are lower than the specified threshold, the selected action is taken.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server  = ""
'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the Maximum Locks Available and Lock Utilisation. When the Available Locks are lower than the threshold, an event is raised. (Version 3.4)>V]
' [A<When the available Locks are lower than the threshold, the selected action is taken.>A]
Const DO_EVENTTH = "y" 		'[M<Event For Threshold Checking? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTDB = "y" 		'[M<Event For Number of Locks? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" 		'[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERS = "y" 		'[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const SEND_NORMAL = "y" 	'[M<Send Event when Number of Locks is Normal? (y/n)>M][T<string,1,' ',yn">T]
Const TH_FREE = 20	 		'[M<Number of Available Locks < >M][T<integer,1,' ',0,9999,Locks>T]
Const TH_UTIL = 90 			'[M<lock Utilisation > >M][T<integer,1,' ',0,100,%>T]
Const CONSEC_TIME = 3 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const Severity = 5 			'[M<Event Severity>M][T<integer,1,' ',1,40,SevLevel>T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim Server As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean
Private FreeFailCount As Integer
Private FreeClearCount As Integer
Private FreeEventFired As Boolean

Private UtilFailCount As Integer
Private UtilClearCount As Integer
Private UtilEventFired As Boolean

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

Sub Main()
	On Error GoTo main_error
	Dim resname$
	resname = "SQLT_Server = " & SQLT_Server
	
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
 	Dim AgtMsg As String
	Dim strErrorMsg As String
	Dim ErrorCode As Long
  	Dim CurLock As Double
	Dim MaxLock As Integer
	Dim AvailLock As Integer
	Dim FileErrNum As Integer
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))
	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSINearMaxLocks" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false  
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If

	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Lock	
	passwd = GetSqlPassword("", "sa")

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting Current locks"
	End If
	CurLock = SQL.RunSqlValue("sa", passwd, True, "select count(*) from master..syslocks", 0, "y", 1, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "RunSqlValue Error code: " & 		 ErrorCode
	End If


	If ErrorCode < 0 Then
		CurLock = -1
		MaxLock = -1
		util = -1
		eventmsg = "Failed to get # of current connections"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
		End If
		GoTo continue
	End If

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting Maximum Locks Value"
	End If

	MaxLock = SQL.ConfigureValue("sa", passwd, "locks", ErrorCode, strErrorMsg)

	If ErrorCode < 0 Then
		MaxLock = -1
		util = -1
		eventmsg = "Failed to get # of current connections"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
		End If
		GoTo continue
	End If

	' Get the percentage
	util = (CurLock/MaxLock) * 100
	AvailLocks = MaxLock-CurLock
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Used Locks = " & Format$(util, "0.00") & "%"
		Print #2 , Now() & "        " & "Maximum Locks = " & MaxLock 
		Print #2 , Now() & "        " & "Available Locks = " &  AvailLocks
	End If

	If DO_EVENTDB = "y" Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "eventing on usage"
			Print #2 , Now() & "        " & "Locks available are " & AvailLocks
			Print #2 , Now() & "        " & "Lock Util is " & Util
		End If

		Detailmsg = "Successfully-obtained-Locks-available " & AvailLocks & chr$(10)
		Detailmsg = Detailmsg & "Successfully-obtained-Lock-Util " & Format$(util, "0.00") & "%" & chr$(10)
		Detailmsg = Detailmsg & "Successfully-obtained-Lock-used " & CurLock & chr$(10)
		If DO_NUMBERS = "y" Then
			Shortmsg = Machinenamestr & " LOCKS AVAIL " & AvailLocks
		Else
			Shortmsg = Machinenamestr & " LOCKS AVAIL NULL"
		End If
		MSActions 40, Shortmsg, AKPID, resname, Detailmsg

		Detailmsg = "Successfully-obtained-Locks-available " & AvailLocks & chr$(10)
		Detailmsg = Detailmsg & "Successfully-obtained-Locks-Util " & Format$(util, "0.00") & "%" & chr$(10)
		Detailmsg = Detailmsg & "Successfully-obtained-Lock-used " & CurLock & chr$(10)
		If DO_NUMBERS = "y" Then
			Shortmsg = Machinenamestr & " LOCKS UTIL " & Format$(util, "0.00") & "%"
		Else
			Shortmsg = Machinenamestr & " LOCKS UTIL NULL"
		End If
		MSActions 40, Shortmsg, AKPID, resname, Detailmsg

	End If

	If DO_EVENTTH = "y" Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Checking thresholds for Locks"
		End If

		If AvailLocks < TH_FREE   Then
			eventmsg = AvailLocks & "Locks"
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Available Locks is below threshold (Less available than threshold set)"
				Print #2 , Now() & "        " & "		Free Locks is " & AvailLocks
				Print #2 , Now() & "        " & "		Threshold set is " & str(TH_FREE) & " Locks"
				Print #2 , Now() & "        " & "		Incrementing count for condition Failure"
			End If		
   			longm = "The number of available locks is " & AvailLocks & "Locks ; <TH = " & CStr(TH_FREE) & " Locks " & chr$(10)
			FreeFailCount = FreeFailCount + 1
			FreeClearCount = 0 
			If FreeFailCount = CONSEC_TIME Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "	Number of Consec times set is " & str(CONSEC_TIME)
					Print #2 , Now() & "        " & "	Number of times the Available Locks has been below Threshold is " & str(FreeFailCount)
					Print #2 , Now() & "        " & "	Firing Event as condition for Available Locks has been met required number of times"										
				End If
				FreeEventFired = true
				If DO_NUMBERS = "y" Then
					eventmsg = Machinenamestr & " LOCKS-AVAIL EXCEEDED " & eventmsg
				Else
					eventmsg = Machinenamestr & " LOCKS-AVAIL EXCEEDED NULL"
				End If
				MSActions Severity, eventmsg, AKPID, resname, longm
				eventmsg = ""
				FreeFailCount = 0 
			End If
		ElseIf AvailLocks > TH_FREE Then
			eventmsg = AvailLocks & "Locks"
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Available Locks is above threshold (More available than threshold set)"
				Print #2 , Now() & "        " & "		Available Locks returned is " & AvailLocks
				Print #2 , Now() & "        " & "		Threshold set is " & str(TH_FREE) & " Locks"
				Print #2 , Now() & "        " & "		Incrementing count for condition Alright"
			End If
   			longm = "The Available Locks are " & AvailLocks & "Locks ; >TH = " & CStr(TH_FREE) & " Locks " & chr$(10)				
			FreeFailCount = 0
			FreeClearCount = FreeClearCount + 1
				If FreeClearCount = CONSEC_TIME And FreeEventFired = true Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
					Print #2 , Now() & "        " & "		Number of times the Available Locks has been above Threshold is " & str(FreeFailCount)
					Print #2 , Now() & "        " & "		Condition for Available Locks has been met required number of times"										
					Print #2 , Now() & "        " & "			and an event has been sent to report that threshold has been exeeded so run AutoClear section"										
				End If
					If DO_NUMBERS = "y" Then
					eventmsg = Machinenamestr & " LOCKS-AVAIL NORMAL " & eventmsg
				Else
					eventmsg = Machinenamestr & " LOCKS-AVAIL NORMAL NULL"
				End If
					If SEND_NORMAL = "y" Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
					End If
					MSActions 40, eventmsg, AKPID, resname, longm
				Else
					If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
							Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					End If
				End If
				FreeEventFired = false
				FreeClearCount = 0 
			End If
		End If


		If util > TH_UTIL   Then
			eventmsg = Format$(util, "0.00") & "%"
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Util is above threshold"
				Print #2 , Now() & "        " & "		Util is " & Format$(util, "0.00") & "%"
				Print #2 , Now() & "        " & "		Threshold set is " & str(TH_UTIL) & "%"
				Print #2 , Now() & "        " & "		Incrementing count for condition Failure"
			End If		
   			longm = "The Lock Util is " & Format$(util, "0.00") & "%" & " ; >TH = " & CStr(TH_UTIL) & "% " & chr$(10)
			UtilFailCount = UtilFailCount + 1
			UtilClearCount = 0 
			If UtilFailCount = CONSEC_TIME Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "	Number of Consec times set is " & str(CONSEC_TIME)
					Print #2 , Now() & "        " & "	Number of times Lock Util has been above Threshold is " & str(UtilFailCount)
					Print #2 , Now() & "        " & "	Firing Event as condition for Lock Util has been met required number of times"										
				End If
				UtilEventFired = true
				If DO_NUMBERS = "y" Then
					eventmsg = Machinenamestr & " LOCKS-UTIL EXCEEDED " & eventmsg
				Else
					eventmsg = Machinenamestr & " LOCKS-UTIL EXCEEDED NULL"
				End If
				MSActions Severity, eventmsg, AKPID, resname, longm
				eventmsg = ""
				UtilFailCount = 0 
			End If
		ElseIf util < TH_UTIL Then
			eventmsg = Format$(util, "0.00") & "%"
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Lock Util is below threshold"
				Print #2 , Now() & "        " & "		Lock Util returned is " & Format$(util, "0.00") & "%"
				Print #2 , Now() & "        " & "		Threshold set is " & str(TH_UTIL) & "%"
				Print #2 , Now() & "        " & "		Incrementing count for condition Alright"
			End If
   			longm = "The Lock Util is " & Format$(util, "0.00") & "%" & " ; <TH = " & CStr(TH_UTIL) & "% " & chr$(10)
			UtilFailCount = 0
			UtilClearCount = UtilClearCount + 1
				If UtilClearCount = CONSEC_TIME And UtilEventFired = true Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
					Print #2 , Now() & "        " & "		Number of times the Lock Util has been above Threshold is " & str(UtilFailCount)
					Print #2 , Now() & "        " & "		Condition for Lock Util has been met required number of times"										
					Print #2 , Now() & "        " & "			and an event has been sent to report that threshold has been exeeded so run AutoClear section"										
				End If
					If DO_NUMBERS = "y" Then
					eventmsg = Machinenamestr & " LOCKS-UTIL NORMAL " & eventmsg
				Else
					eventmsg = Machinenamestr & " LOCKS-UTIL NORMAL NULL"
				End If
					If SEND_NORMAL = "y" Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
					End If
					MSActions 40, eventmsg, AKPID, resname, longm
				Else
					If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
							Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					End If
				End If
				UtilEventFired = false
				UtilClearCount = 0 
			End If
		End If


	End If

 	If DO_DATA = "y" Then
 		If IterationCount() = 1 Then
 			DataHeader "Available Locks^^Locks", 0, 1
 			DataHeader "Locks Utilisation^^%", 0, 2
 		End If
 		datastring = "Avail Locks= " & AvailLocks & chr$(10) & "Used %= " & Format$(util, "0.00") & "%" & chr$(10)			
		DataLog 1, AvailLocks, datastring
		DataLog 2, Util, datastring
 	End If
continue:
If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking Locks"
	Close #2
End If
GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


