'### Copyright (c) 1997-1999 NetIQ Corp. All rights reserved.
'###
'### AD_SSIFSMOHealth.ebs
'### Monitors access to the domain controllers that serve FSMO roles by connecting via ADSI.

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.2"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 0				' NeedKPW bit is 0
'AdminOnly = 0				' AdminOnly bit is 0
'DisplayToolBar = 1			' DisplayToolBar bit is 1
'Description = Monitors access to the domain controllers that serve FSMO roles by connecting via ADSI.
'### End KP-Status Section

'### Begin KPC Section
'KPC					= ThirtyM
'### End KPC Section

'### Begin Type Section
Const ACTIVEDS_DOMAINDNS = ""
'### End Type Section

'### Begin KPP Section
'[V<CPReady.Monitors access to the DCs serving FSMO roles. The script attempts to use ADSI to connect to each domain controller that handles an operations master role. If the connection fails for any DC, an event is raised.(Version 3.4ac)>V]
Const Severity = 5			'[M<Severity - Domain controller down>M] [T<Integer,,,1,39,SevLevel>T]
Const SeverityFail = 15		'[M<Severity - Knowledge Script failure>M] [T<Integer,,,1,39,SevLevel>T] 
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
'[A<If the LDAP connection to any domain controller serving as FSMO is down, the selected action is taken.>A]
Const AKPID = "AKP_NULL"	'[M<Action taken>M]
'### End KPP Section

'### Begin KPS Section
Const DO_EVENT = "y"		
Const DO_DATA = "n"			
Const Sev_Normal = 40		
Const SEND_NORMAL = "y"		
Option Base 1
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long

Dim Machinenamestr As String

Dim DO_DEBUG As String
Dim Openfilefail As Boolean



Const UNIT = "^^Status"

Type DCStruct
	DCName As String
	DCStatus As Long
	DCRole As String
	NewDC As Boolean
	DeletedDC As Boolean
	EventFired As Boolean
End Type

	
Dim DCs() As DCStruct

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function

Function AlterString(sString As String, sCharToReplace As String, sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim ACTIVEDS As Object		' Keep the reference count of this DLL

Function MyGetProgID (progid As String) As String
	Dim version As String

	MCVersion "netiqmc.exe", version
	If version < "3.4" Then
		MCAbort resname, "AM 3.4 or greater is required."
	Else
		MyGetProgID = MCGetMOID (progid,AppManID)
	End If
End Function

Sub Main()
	'On Error GoTo main_error
	If Iterationcount() =1 Then	
		Openfilefail = false
	End If
	Dim  CurrentFSMOList$, i&, currentfsmo$, detailmsg$, rolemsg$, success&
	Dim fsmodown As Boolean

	Dim sval$, version$, progid$
	Dim resname As String
	Dim shoremsg As String
	Dim longmsg As String
	Dim ErrMsg As String
	Dim ErrCode As Long
	Dim rc As Long
	Dim II As Long
	Dim DCNum As Long
	Dim SiteName As String
	Dim DCName As String
	Dim DCStatus As Long
	Dim List As String
	Dim Result As String
	Dim uNum As Long
	Dim dNum As Long
	Dim per As Double
	resname = "ACTIVEDS_DOMAINDNS = " & ACTIVEDS_DOMAINDNS


	If IterationCount() = 1 Then

	    Dim NameSize As Long
    	Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
	    MachineName1 = Space$(16)
    	NameSize = Len(MachineName1)
	    X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y

		Machinenamestr = lcase(trim(Machinenamestr))

		version = ""
		progid = MyGetProgId  ("NetiQAgent.ACTIVEDS")
		Set ACTIVEDS = CreateObject (progid)
	    'Set ACTIVEDS = CreateObject ("NetiQAgent.ACTIVEDS")
 		If DO_DATA = "y" Then
 			DataHeader "FSMO up @ " & ACTIVEDS_DOMAINDNS, 0, 0
        End If
	End If


	DO_DEBUG = DEBUG
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"AD_SSIFSMOHealth" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Opened debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If
	End If
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting FSMO Roles for " & ACTIVEDS_DOMAINDNS
	End If
	errcode = ACTIVEDS.ListRoles("",ACTIVEDS_DOMAINDNS, CurrentFSMOList, errmsg)

    If errcode <> 0 Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Aborting KS due to error : " & errmsg
			Close #2
		End If
		MCAbort resname, errmsg
 	End If

	If (errcode = 0) Then
		DcNum = ItemCount(CurrentFSMOList,",")
		Dim NewDCs(DcNum) As DCStruct

		If IterationCount() = 1  And DO_DATA = "y" Then
			DataHeader "FSMO Health for Domain DNS Server " & ACTIVEDS_DOMAINDNS & UNIT, 0, 0
		End If

		dNum = 0
		uNum = 0
		Result = "FSMO Health for Domain DNS Server " & ACTIVEDS_DOMAINDNS & Chr$(10)
		For II=1 To DcNum
			Select Case II
				Case 1
					rolemsg = "schema"
				Case 2
					rolemsg = "domain"
				Case 3
					rolemsg = "PDC"
				Case 4
					rolemsg = "RID"
				Case 5
					rolemsg = "infrastructure"
				Case Else
					rolemsg = "<unknown>"
			End Select

			DCName = Item$(CurrentFSMOList,II,,",")
			DCcode = ACTIVEDS.ConnectADServer(DCName, success, errmsg)
			If DCcode <> 0 Or success = 0 Then
				DCStatus = 0
			Else
				DCStatus = 1
			End If
			NewDCs(II).DCName = DCName
			NewDCs(II).DCStatus = DCStatus
			NewDCs(II).DCRole = rolemsg
			NewDCs(II).NewDC = true
			NewDCs(II).DeletedDC = true
			NewDCs(II).EventFired = false
		Next II

		Dim TmpDCs() As DCStruct				

		'All NewDC are New so copy to Tmp
		If iterationcount() = 1 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "First Iteration so all New FSMO's are Actual FSMO's"
				Print #2 , Now() & "        " & "Copy all DC's to Tmp DC array"
			End If
			ReDim TmpDCs(DcNum-1)
			For DCCount = 1 To (DcNum-1)
			  TmpDCs(DCCount) = NewDCs(DCCount)
			Next DCCount
		Else
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Check New DC's against Persistant List"
			End If

			'Check all NewDC's if found in persistant array then not new
			For DCCountx = 1 To ubound(NewDCs())
				For DCCounty = 1 To ubound(DCs())
					If NewDCs(DCCountx).DCName = DCs(DCCounty).DCName Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "DC : " & NewDCs(DCCountx).DCName & " Found, Update NewDC and Status"
						End If
						NewDCs(DCCountx).NewDC = false
						DCs(DCCounty).DCStatus = NewDCs(DCCountx).DCStatus						
						DCs(DCCounty).DCRole = NewDCs(DCCountx).DCRole
					End If	
				Next DCCounty
			Next DCCountx

			'Check all persisatnt array, if not in NewDC than deleted
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Check DC in Persistant array to get removed ones"
			End If

			For DCCounty = 1 To ubound(DCs())
				DCs(DCCounty).DeletedDC = true
				For DCCountx = 1 To ubound(NewDCs())
					If DCs(DCCounty).DCName = NewDCs(DCCountx).DCName Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "DC : " & NewDCs(DCCountx).DCName & " Found so update persistant to be deleted = n"
						End If
						DCs(DCCounty).DeletedDC = false
					End If	
				Next DCCountx
			Next DCCounty

			'Copy Persistant DC that are not marked as deleted
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Copy DC's from Persistant arry to Tmp if not marked as deleted"
			End If

			For DCCounty = 1 To Ubound(DCs())
				If DCs(DCCounty).DeletedDC  = false Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "DC : " & DCs(DCCounty).DCName & " Copied to Tmp Array"
					End If
					If arraydims(TmpDCs()) = 0 Then
						ReDim TmpDCs(1)
						TmpDCs(1) = DCs(DCCounty)
					Else
						ReDim TmpDCs(ubound(TmpDCs)+1)
						TmpDCs(ubound(TmpDCs)) = DCs(DCCounty)
					End If
				Else
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "DC : " & DCs(DCCounty).DCName & " Marked as deleted"
					End If
				End If
			Next DCCounty

			' Create all New DC in Tmp
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Copy DC's from new array to Tmp if marked as deleted"
			End If

			For DCCountx = 1 To ubound(NewDCs())
				If NewDCs(DCCountx).NewDC = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "DC : " & NewDCs(DCCountx).DCName & " Copied as it is a new DC"
					End If
					If arraydims(TmpDCs()) = 0 Then
						ReDim TmpDCs(1)
						TmpDCs(1) = NewDCs(DCCountx)
						Else
						ReDim TmpDCs(ubound(TmpDCs)+1)
						TmpDCs(ubound(TmpDCs)) = NewDCs(DCCountx)
					End If
				End If
			Next DCCountx
		End If

		'DCs only contains new DC and non-deleted persistant DCs
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Move all tmp DC's to Persistant array"
		End If

		ReDim DCs(ubound(TmpDCs()))
		For DCCounty = 1 To ubound(TmpDCs())
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Moving DC : " & DCs(DCCounty).DCName & " over"
			End If
			DCs(DCCounty)=TmpDCs(DCCounty) 
		Next DCCounty
	
				
		For DCCounty = 1 To ubound(DCs())
			If DCs(DCCounty).DCStatus = 0 Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "DC : " & DCs(DCCounty).DCName & " Status is down"
				End If
				dNum = dNum + 1
				Result = Result & DCName & " down" & Chr$(10)
				If DO_EVENT = "y" Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "DC : " & DCs(DCCounty).DCName & " Send Down Event"
					End If

					DCs(DCCounty).EventFired = true
					eventmsg = Machinenamestr & " " &  "FSMO-" & alterString(DCs(DCCounty).DCName," ","-") & " DOWN NULL"
					longm = "Trying to connect to DC " &  chr$(10) 
					longm = longm & DCs(DCCounty).DCName & " gave no response" & chr$(10) 
					MSActions Severity,eventmsg , AKPID, resname, longm
				End If
			Else
				uNum = uNum + 1
				Result = Result & DCName & " up" & Chr$(10)
				If DO_EVENT = "y" Then
					eventmsg = Machinenamestr & " " & "FSMO-" & alterString(DCs(DCCounty).DCName," ","-") & " NORMAL NULL"
					longm = "Trying to connect to DC " &  chr$(10) 
					longm = longm & DCs(DCCounty).DCName & " gave a response" & chr$(10) 
					If DCs(DCCounty).EventFired = true Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "DC : " & DCs(DCCounty).DCName & " is back up"
						End If
						If SEND_NORMAL = "y" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "	Send Normal Event"
							End If
							MSActions Sev_Normal,eventmsg , AKPID, resname, longm
						Else
							If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
								If DO_DEBUG  = "y" Then
									Print #2 , Now() & "        " & "	Send Normal Event, as action is Command Post"
								End If
								MSActions Sev_Normal,eventmsg , AKPID, resname, longm
							End If
						End If
					End If
					DCs(DCCounty).EventFired = false
				End If
			End If
		Next DCCounty

		If DO_DATA = "y" Then
			per = 100 * uNum / (dNum + uNum)
			DataLog 0, per, Result
		End If
	Else
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Error getting FSMO list"
		End If
		eventmsg = Machinenamestr & " " &  "FSMO-HEALTH ERROR NULL"
		longm = "Can't access the domain controller" & chr$(10)
		longm = longm & "The error is "  & rc
		MSActions SeverityFail, eventmsg, AKPID, resmsg, longmsg
	End If

If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking FSMO Health"
	Print #2 , Now() 
	Close #2
End If
GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select

main_exit:

End Sub
'### End KPS Section

