'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSIAutoGrowth

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the Growth of the databases on a server

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server  = ""
Const Detail_2= ""
'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the Growth of the DB's on a server. (*) Percentage will be used on the event if both Percent and MB are set to y, Monitors SQL Server Version 7.0 Only (Version 3.4)>V]
' [D<SQLT_Server>D]
' [A<When growth in databases exceeds threshold, the selected action is taken.>A]
Const DO_EVENT = "y" 		'[M<Event For Auto-Growth Thresholds? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTSTAT = "y" 	'[M<Event For New Physical Files? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTNEW = "y" 	'[M<Event For New Database? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTDEL = "y" 	'[M<Event For Database deleted? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERSPERC = "y" 	'[M<Show Percentages on Events (*) (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERSMB = "y" 	'[M<Show Megabytes on Events (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATAPERC = "n" 	'[M<Collect Data (Percentage)? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATAMB = "n" 		'[M<Collect Data (Megabytes)? (y/n)>M][T<string,1,' ',yn">T]
Const THRESH_PERC = 10 		'[M<Threshold for Percentage Increase>M] [T<long,,,0, 100, %>T]
Const THRESH_MB = 10 		'[M<Threshold for MB Increase>M] [T<long,,,0, 100, MB>T]
Const CONSEC_TIMES = 1 		'[M<Consecutive times>M] [T<long,,,1, 100, TImes>T]
Const Severity = 5 			'[M<Event Severity>M][T<integer,1,' ',1,39,SevLevel>T]
Const SeverityStat = 5 		'[M<Event Severity - DB Status Changed>M][T<integer,1,' ',1,39,SevLevel>T]
Const SeverityNew = 5 		'[M<Event Severity - DB Added>M][T<integer,1,' ',1,39,SevLevel>T]
Const SeverityDel = 5 		'[M<Event Severity - DB Deleted>M][T<integer,1,' ',1,39,SevLevel>T]
Const DEBUG  = "y"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Option Base 1
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim Server As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean
'fileid groupid size        maxsize     growth      status      perf  name filename  
Type PhysFiles
	fileid As Integer
	size As Integer	
	MaxSize As Integer
	status As Long	
	Logicalname As String
	Filename As String
End Type

'maximum files associated with any DB is set to 8 as nested arrays cannot be dynamic.
Type DBSize
	DBName As String
	DBFiles(8) As PhysFiles
	NoFiles As Integer
	ConsecTimes As Integer
	EventFired As Boolean
	NewDB As Boolean
	DeletedDB As Boolean
End Type

Private DBArray() As DBSize

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function

Function printarray(DBArray() As DBSize) As Boolean
Dim dbcount As Integer	
	Print #2 , Now() & "        " & "Number of Databases 			= " &  ubound(DBArray)
	For dbcount = 1 To (ubound(DBArray))
		If DBArray(dbcount).DBName Like "PAULCa*" Then
		Print #2 , Now() & "        " & "	Database Name	: " & DBArray(dbcount).DBName
		Print #2 , Now() & "        " & "	Event Fired		: " & DBArray(dbcount).EventFired
		Print #2 , Now() & "        " & "	New Database	: " & DBArray(dbcount).NewDB
		Print #2 , Now() & "        " & "	ConsecTimes		: " & DBArray(dbcount).ConsecTimes
		Print #2 , Now() & "        " & "	Deleted Database: " & DBArray(dbcount).DeletedDB
		Print #2 , Now() & "        " & "	Number of Files	: " & DBArray(dbcount).NoFiles
		Print #2 , Now() & "        " & "	Files Associated with the Database" 
		For dbcounty = 1 To 8 
			If DBArray(dbcount).DBFiles(dbcounty).fileid > 0 Then
				Print #2 , Now() & "        " & "		File " & dbcounty
				Print #2 , Now() & "        " & "		FileID 		: " & DBArray(dbcount).DBFiles(dbcounty).fileid
				Print #2 , Now() & "        " & "		size		: " & DBArray(dbcount).DBFiles(dbcounty).size
				Print #2 , Now() & "        " & "		Maxsize		: " & DBArray(dbcount).DBFiles(dbcounty).MaxSize
				Print #2 , Now() & "        " & "		Status		: " & DBArray(dbcount).DBFiles(dbcounty).Status
				Print #2 , Now() & "        " & "		LogicalName	: " & DBArray(dbcount).DBFiles(dbcounty).LogicalName
 				Print #2 , Now() & "        " & "		FileName	: " & DBArray(dbcount).DBFiles(dbcounty).FileName
				Print #2 , Now()
			End If
		Next dbcounty
		End If
	Next dbcount

End Function

Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

Sub Main()
	On Error GoTo main_error
	Dim resname$
	resname = "SQLT_Server = " & SQLT_Server
	Dim TmpDBArray() As DBSize
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
 	Dim AgtMsg As String
	Dim strErrorMsg As String
	Dim ErrorCode As Long
  	Dim CurConn As Long
	Dim CurrentCount As Long
	Dim MaxConn As Integer
	Dim AvailLock As Integer
	Dim FileErrNum As Integer
	Dim sqlcmd As String
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))

	 	If DO_DATAPERC = "y" Then
 			DataHeader "DB Growth ^^%", 0, 1
		End If
	 	If DO_DATAMB = "y" Then
 			DataHeader "DB Growth ^^MB", 0, 2
		End If

	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSIAutoGrowth" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then
			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false  
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If

	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Lock	
	passwd = GetSqlPassword("", "sa")


	If left(Detail_2,1) <> 7 Then
		eventmsg = "DB-GROWTH ERROR NULL"
		strErrorMsg = "This script will only run on SQL Server Version 7.0 and Higher" & chr$(10)
		strErrorMsg = strErrorMsg & "The version of SQL Server that the script has been run against" & chr$(10)
		strErrorMsg = strErrorMsg & "has been reported back as " & Detail_2
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Incorrect Version of SQL SERVER"
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If


	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Script start"
'		Print #2 , Now() & "        " & "Version of SQL Server : " & Detail_2
 '		If iterationcount() <> 1 Then
  '			Print #2 , Now() & "        " & "This is The DB when Script starts"
   '			ret = printarray(DBArray)	
	'	End If
	 '	Print #2 , Now() & "        " & "Getting Current Databases"
	End If
	sqlcmd = "select name from master..sysdatabases"
	'Check how this should be represented should it be select count(*) from sysproccesses gives same count as sp_who
	CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Number of Databases retrieved from Server			= " &  CurrentCount
	End If
	If ErrorCode < 0 Then
		eventmsg = "DB-AVAIL ERROR NULL"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	If DO_DEBUG  = "y" Then
'		Print #2 , Now() & "        " & "Checking New/Old Arrays for list of databases"
	End If


	If CurrentCount > 0 Then
		Dim NewDBArray(CurrentCount) As DBSize
	Else
		eventmsg = "DB-GROWTH ERROR NULL"
		strErrorMsg = "No DB's listed, error has occured"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	If DO_DEBUG  = "y" Then
		Print #2 , Now() 
		Print #2 , Now() & "        " & "Reading Databases from AgntMsg into Array"
		Print #2 , Now() 
	End If


	For DBCount = 1 To (linecount(AgtMsg) -1)
			If DBCount > 2 Then
				If DO_DEBUG  = "y" Then				
					'Print #2 , Now() & "        " &	"DBCount = " & DBCount
'					Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,DBCount), 1 ,, ","))
				End If
				NewDBArray(DBCount-2).DBName = trim(Item$(line$(AgtMsg,DBCount), 1 ,, ","))
				NewDBArray(DBCount-2).Eventfired = false
				NewDBArray(DBCount-2).ConsecTimes = 0
				NewDBArray(DBCount-2).NewDB = true
				NewDBArray(DBCount-2).DeletedDB = true
				NewDBArray(DBCount-2).NoFiles = 0
				If DO_DEBUG  = "y" Then				
'					Print #2 , Now() & "        " & " Filled Array Element " & (DBCount-2)
				End If
			End If
	Next DBCount

	'get FileInfo for each database

	For DBCounty = 1 To ubound(NewDBArray)
		sqlcmd = "select str(fileid) + CHAR(44),str(size) + CHAR(44),str(MaxSize) +CHAR(44),str(status) + CHAR(44),rtrim(name) + CHAR(44),rtrim(filename) from " & trim(NewDBArray(DBCounty).DBname) & "..sysfiles"
		CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)
		If DO_DEBUG  = "y" Then
'			Print #2 , Now() & "        " & "Number of Files for DB " & trim(NewDBArray(DBCounty).DBname) & " = " &  CurrentCount
		End If
		If ErrorCode < 0 Then
			eventmsg = "DB-FILES ERROR NULL"
			MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
			If DO_DEBUG  = "y" Then
'				Print #2 , Now() & "        " & eventmsg
 '				Print #2 , Now() & "        " & strErrorMsg
			End If
		Else
			If DO_DEBUG  = "y" Then				
'				Print #2 , Now() & "        " &	"Files for DB " & trim(NewDBArray(DBCounty).DBname) & " = " & CurrentCount
			End If
			For DBCount = 1 To (linecount(AgtMsg) -1)
				If DBCount > 2 And DBCount < 11  Then
					NewDBArray(DBCounty).DBFiles(DBCount -2).fileid = cint(Item$(line$(AgtMsg,DBCount), 1 ,, ","))
					NewDBArray(DBCounty).DBFiles(DBCount -2).size = cint(cint(Item$(line$(AgtMsg,DBCount), 2 ,, ","))*0.0078)
				   	NewDBArray(DBCounty).DBFiles(DBCount -2).MaxSize = cint(Item$(line$(AgtMsg,DBCount), 3 ,, ","))
					NewDBArray(DBCounty).DBFiles(DBCount -2).Status = clng(Item$(line$(AgtMsg,DBCount), 4 ,, ","))
					NewDBArray(DBCounty).DBFiles(DBCount -2).LogicalName = trim(Item$(line$(AgtMsg,DBCount),5 ,, ","))
					NewDBArray(DBCounty).DBFiles(DBCount -2).FileName = trim(Item$(line$(AgtMsg,DBCount),6 ,, ","))
					NewDBArray(DBCounty).NoFiles = NewDBArray(DBCounty).NoFiles + 1
					If DO_DEBUG  = "y" Then				
 '						Print #2 , Now() & "        " & " Filled Array Element " & (DBCount - 2)
					End If					
				ElseIf DBCount > 10 Then
						longm = "The Number of files associated with Database " & trim(NewDBArray(DBCounty).DBname) & chr$(10) 
						longm = longm & "Has exceeded the internal limit of this script " & chr$(10) 
						longm = longm & "Which is 8 associated files " & chr$(10) 
						longm = longm & "Only the First 8 associated files will be monitored" &  chr$(10) 
						longm = longm & "Please contact your NetIQ Focal Point, with this issue" &  chr$(10) 
						eventmsg = "DB-FILES ERROR NULL"
						MSActions Severity, eventmsg, AKPID, resname, longm
						longm=""
				End If
			Next DBCount
		End If
	Next DBCounty

	If DO_DEBUG  = "y" Then				
		Print #2 , Now()
		Print #2 , Now() & "        " & "NewDBArray Created by reading info from server"
'		ret = printarray(NewDBArray)	
	End If

	
If iterationcount() = 1 Then
	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "First Iteration, so new DB contains the actual DB's"
	End If

	ReDim DBarray(ubound(NewDBArray))
	For DBCounty = 1 To ubound(NewDBArray)
		DBarray(DBCounty) = NewDBArray(DBCounty)
		For DBCountx = 1 To (NewDBArray(DBCounty).NoFiles)		
			DBarray(DBCounty).DBFiles(DBCountx) = NewDBArray(DBCounty).DBFiles(DBCountx)
		Next DBCountx
		DBarray(DBCounty).NoFiles = NewDBArray(DBCounty).NoFiles
	Next DBCounty
Else


'Update all old DB's to be deleted, only the ones that are matched will be reset to not be deleted
	For DBCounty = 1 To ubound(DBArray)
		DBArray(DBCounty).DeletedDB = true
	Next DBCounty

If DO_DEBUG  = "y" Then				
	Print #2 , Now() & "        " & "The Following array should have all elements set to deletedDB = true"
'	ret = printarray(DBArray)	
End If
	If DO_DEBUG  = "y" Then				
'		Print #2 , Now() & "        " & "Check each DB in NewDB Array, to see if it already exists"
 '		If iterationcount() <> 1 Then
  '			Print #2 , Now() & "        " & "DBArray before adding new DB's"
   '			ret = printarray(DBArray)	
	'	End If
	 '	Print #2 , Now() & "        " & "NewDBArray before adding new DB's"
	  '	ret = printarray(NewDBArray)	
	End If

'Check if each database exists in the old database array or has been deleted
	For DBCount = 1 To (ubound(NewDBArray))
		If DO_DEBUG  = "y" Then				
'			Print #2 , Now() & "        " & "	Checking DB " & NewDBArray(DBCount).DBName
		End If

		'Cycle through each DB in the NewDB List and compare it to the oldDB List
			For DBCounty = 1 To ubound(DBArray)
				If NewDBArray(DBCount).DBName = DBArray(DBCounty).DBName Then
					If DO_DEBUG  = "y" Then				
						Print #2 , Now()
						Print #2 , Now() & "        " & "	DB Exists in old DB Array"
						Print #2 , Now() & "        " & "   NewDB Number of Files " & NewDBArray(DBCount).NoFiles 
						Print #2 , Now() & "        " & "   OldDB Number of Files " & DBArray(DBCounty).NoFiles
					End If
					NewDBArray(DBCount).NewDB = false
					DBArray(DBCounty).DeletedDB = false
					If DO_EVENTSTAT = "y" Then
						If NewDBArray(DBCount).NoFiles <> DBArray(DBCounty).NoFiles Then
							eventmsg = Machinenamestr & " " &  "DB-" & alterstring(NewDBArray(DBCount).DBName," ","-") & " FILES NULL"
							longm = "The Number files associated with Database " & NewDBArray(DBCount).DBName & chr$(10) 
							longm = longm & "Has changed Since last check."& chr$(10) 
							longm = longm & "The Files Associated with this Database are " &  chr$(10) 
							For DBcountx = 1 To 8
								If NewDBArray(DBCount).DBFiles(DBCountx).LogicalName <> "" Then
									longm = longm & NewDBArray(DBCount).DBFiles(DBCountx).LogicalName & "    " & NewDBArray(DBCount).DBFiles(DBCountx).FileName & chr$(10) 
								End If
							Next DBcountx
							longm = longm & chr$(10) 
							longm = longm & "Previously these were the files associated."& chr$(10) 
							For DBcountx = 1 To 8
								If DBArray(DBCounty).DBFiles(DBCountx).LogicalName <> "" Then
									longm = longm & DBArray(DBCounty).DBFiles(DBCountx).LogicalName & "    " & DBArray(DBCounty).DBFiles(DBCountx).FileName & chr$(10) 
								End If
							Next DBcountx
							MSActions SeverityStat,eventmsg , AKPID, resname, longm
						End If
					End If
				End If
			Next DBCounty
	Next DBCount

	If DO_DEBUG  = "y" Then				
		Print #2 , Now()
		Print #2 , Now() & "        " & "Any Files that did not exist in old DB should be in new DB now, check following arrays"
		Print #2 , Now() & "        " & "except the deleted ones"
		Print #2 , Now() & "        Print out of NewDBArray"
'		ret = printarray(NewDBArray)
  		Print #2 , Now() & "        Print out of DBArray"
'		ret = printarray(DBArray)

	End If


	For DBCount = 1 To ubound(NewDBArray)
		If 	NewDBArray(DBCount).NewDB = true Then
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	DB " & NewDBArray(DBCount).DBName & " Marked as New DB"
			End If
			ReDim Preserve DBArray(ubound(DBArray)+1)
			DBArray(ubound(DBArray)).DBName = NewDBArray(DBCount).DBName
			For DBCountx = 1 To (NewDBArray(DBCount).NoFiles)		
				DBarray(ubound(DBArray)).DBFiles(DBCountx) = NewDBArray(DBCount).DBFiles(DBCountx)
			Next DBCountx
			DBArray(ubound(DBArray)).NoFiles = NewDBArray(DBCount).NoFiles
			DBArray(ubound(DBArray)).Eventfired = false
			DBArray(ubound(DBArray)).ConsecTimes = 0
			DBArray(ubound(DBArray)).NewDB = True
			DBArray(ubound(DBArray)).DeletedDB = false
			If DO_EVENTNEW = "y" Then
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(ubound(DBArray)).DBName," ","-") & " NEW NULL"
				longm = "Database " & DBArray(ubound(DBArray)).DBName & " Has been added to the SQL Server" & chr$(10) 
				MSActions SeverityNew,eventmsg , AKPID, resname, longm
				longm = ""
			End If
		End If
	Next DBCount

	If DO_DEBUG  = "y" Then				
'		Print #2 , Now() & "        " & "Copying old DB Contents to Temp Array, Deleted DB's will not be copied"
	End If

	For DBCounty = 1 To (ubound(DBArray))
		If DBArray(DBCounty).DeletedDB = false Then
			If DO_DEBUG  = "y" Then				
'				Print #2 , Now() & "        " & "	DB " & DBArray(DBCounty).DBName & " Copied Over"
			End If
			If arraydims(TmpDBArray) = 0 Then
				ReDim TmpDBArray(1)
			Else
				ReDim Preserve TmpDBArray(ubound(TmpDBArray)+1)
			End If
			If DO_DEBUG  = "y" Then				
 '			   	Print #2 , Now() & "        " & "	TempDB Array " & DBArray(DBCounty).DBName & " added to array space " & ubound(TmpDBArray)
			End If
			TmpDBArray(ubound(TmpDBArray)).DBName = DBArray(DBCounty).DBName
			For DBCountx = 1 To 8		
				TmpDBArray(ubound(TmpDBArray)).DBFiles(DBCountx) = DBArray(DBCounty).DBFiles(DBCountx)
			Next DBCountx
			TmpDBArray(ubound(TmpDBArray)).NoFiles = DBArray(DBCounty).NoFiles
			TmpDBArray(ubound(TmpDBArray)).Eventfired = DBArray(DBCounty).Eventfired
			TmpDBArray(ubound(TmpDBArray)).ConsecTimes = DBArray(DBCounty).ConsecTimes
			TmpDBArray(ubound(TmpDBArray)).NewDB = false
			TmpDBArray(ubound(TmpDBArray)).DeletedDB = false
		Else
			If DO_DEBUG  = "y" Then				
  '				Print #2 , Now() & "        " & "	DB " & DBArray(DBCounty).DBName & " Marked as Deleted, not copied"
			End If
			If DO_EVENTDEL = "y" Then
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(DBCounty).DBName," ","-") & " DELETED NULL"
				longm = "Database " & DBArray(DBCounty).DBName & " Has been Removed from the SQL Server" & chr$(10) 
				MSActions SeverityDel,eventmsg , AKPID, resname, longm
			End If

		End If		
	Next DBCounty
	'Adds extra element to TmpArray so that every array has needed elements + 1 (Better method would be use option base 1)

	'Copy tmp db (with deleted DB's missing) back to DBArray
	ReDim DBarray(ubound(TmpDBArray))
	For DBCounty = 1 To ubound(TmpDBArray) 
		DBarray(DBCounty) = TmpDBArray(DBCounty)
		For DBCountx = 1 To 8
			DBarray(DBCounty).DBFiles(DBCountx) = TmpDBArray(DBCounty).DBFiles(DBCountx)
		Next DBCountx
	Next DBCounty

	If DO_DEBUG  = "y" Then				
'		Print #2 , Now() & "        " & " Final List of databases to check availability" 
 '		Print #2 , Now() & "        " & " 			DB Information" 
	End If
End If

If DO_DEBUG  = "y" Then				
'	Print #2 , Now() & "        Print out of NewDBArray"
 '	ret = printarray(NewDBArray)
  '	If iterationcount() <>  1 Then
   '		Print #2 , Now() & "        Print out of TmpDBArray"
	'	ret = printarray(TmpDBArray)
'	End If
 '	Print #2 , Now() & "        Print out of DBArray"
  '	ret = printarray(DBArray)
End If

'Now Compare NewDB with DBArray (which has had deleted DB's removed and NewDB's Added

Dim PercentChange As Double
Dim MBChange As Double
	For DBCount = 1 To ubound(NewDBArray)
		If DO_DEBUG  = "y" Then				
			Print #2 , Now() & "        " & "	Checking DB " & NewDBArray(DBCount).DBName & " From New array against old array"
		End If
		For DBCounty = 1 To ubound(DBArray)			
			'Same DB 
			If NewDBArray(DBCount).DBName = DBArray(DBCounty).DBName Then
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " & "	DBNames Match"
				End If

				fireevent = false
				PercentageEx = false
				PercentageTotal = 0	
				MegabytesEx = false
				MegabytesTotal = 0	
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(DBCounty).DBName," ","-") & " GROWTH "
				longm = "Event for Database " & NewDBArray(DBCount).DBName & chr$(10) 
				'So now compare	File Sizes
				For FileCountx = 1  To 8
					For FileCounty = 1  To 8
						'Same Filename
						If NewDBArray(DBCount).DBFiles(FileCountx).Filename = DBArray(DBCount).DBFiles(FileCounty).Filename Then
							If DO_DEBUG  = "y" Then				
								Print #2 , Now() & "        " & "	FileNames Match"
							End If

							'So Check Sizes
							If NewDBArray(DBCount).DBFiles(FileCountx).Size <> DBArray(DBCount).DBFiles(FileCounty).Size Then
								If DO_DEBUG  = "y" Then				
									Print #2 , Now() & "        " & "	Sizes do not match"
								End If
								PercentChange = ((NewDBArray(DBCount).DBFiles(FileCountx).Size - DBArray(DBCount).DBFiles(FileCounty).Size)/  DBArray(DBCount).DBFiles(FileCounty).Size) * 100.0
								MBChange = NewDBArray(DBCount).DBFiles(FileCountx).Size - DBArray(DBCount).DBFiles(FileCounty).Size
								If  (PercentChange > THRESH_PERC)  Or (MBChange > THRESH_MB) Then
									DBArray(DBCount).ConsecTimes = DBArray(DBCount).ConsecTimes + 1
									If DO_DEBUG  = "y" Then				
										Print #2 , Now() & "        " & "	Exceeded Threshold"
										Print #2 , Now() & "        " & "	Consec Times = " &  DBArray(DBCount).ConsecTimes
									End If
									If DBArray(DBCount).ConsecTimes >= CONSEC_TIMES Then
										fireevent = true
										If DO_DEBUG  = "y" Then				
											Print #2 , Now() & "        " & "	DB File " & NewDBArray(DBCount).DBFiles(FileCountx).Filename & " has change over the threshold allowed"
 											Print #2 , Now() & "        " & "	Percentage Change " & PercentChange & "%"
 											Print #2 , Now() & "        " & "	MB Change " & MBChange & "MB"
										End If
										longm = longm & "The File " &  NewDBArray(DBCount).DBFiles(FileCountx).LogicalName & " Has changed" & chr$(10) 
										longm = longm & "over the set Threshold."& chr$(10) 
										longm = longm & "The Physical Name for this file is " & chr$(10) 
										longm = longm &  NewDBArray(DBCount).DBFiles(FileCountx).Filename & chr$(10) 
										If NewDBArray(DBCount).DBFiles(FileCountx).MaxSize = -1 Then
											longm = longm & "This file has been set for unlimited growth" & chr$(10) 
										End If
										longm = longm & "New File Size = " & NewDBArray(DBCount).DBFiles(FileCountx).Size & "MB " & ", Old File Size = " &DBArray(DBCount).DBFiles(FileCounty).Size & "MB " & chr$(10) 
										longm = longm & "File Size Change is  " & MBChange & "MB" 
										longm = longm & " and Threshold is " & THRESH_MB & "MB" & chr$(10) 
										longm = longm & "File Size Change is  " & cint(PercentChange) & "% "
										longm = longm & "and Threshold is " & THRESH_PERC & "%" & chr$(10) 
										longm = longm & "The file growth has exceeded " 
										longm = longm & "the threshold " & DBArray(DBCount).ConsecTimes & " Time(s)" & chr$(10) 
										longm = longm & chr$(10) 
										DBArray(DBCount).ConsecTimes = 0					
										MegabytesTotal = MegabytesTotal + MBChange
										PercentageTotal = PercentageTotal + PercentChange

										If (MBChange > THRESH_MB)  Then
											MegabytesEx = True
										End If
										If  (PercentChange > THRESH_PERC)   Then
											PercentageEx = True
										End If
									End If
								End If
							Else
								'If DO_DEBUG  = "y" Then				
								'	Print #2 , Now() & "        " & "	Not Checked file " & NewDBArray(DBCount).DBFiles(FileCountx).Filename & " as the filesize has not changed"
								'End If
							End If
						End If
					Next FileCounty
				Next FileCountx

				If DO_EVENT = "y" And fireevent = true Then
					If DO_NUMBERSPERC = "y" Or DO_NUMBERSMB = "y" Then

						If DO_NUMBERSPERC = "y" And DO_NUMBERSMB = "n" Then
							eventmsg = eventmsg &  cint(PercentageTotal)  & "%"

						ElseIf DO_NUMBERSPERC = "n" And DO_NUMBERSMB = "y" Then
							eventmsg = eventmsg &  MegabytesTotal & "MB"

						ElseIf DO_NUMBERSPERC = "y" And DO_NUMBERSMB = "y" Then
							eventmsg = eventmsg &  cint(PercentageTotal)  & "%"

						End If
					Else
						eventmsg = eventmsg & "NULL"
					End If

					MSActions Severity,eventmsg , AKPID, resname, longm
				End If

			 	If DO_DATAPERC = "y" Then
 					DataLog 1,PercentageTotal,"Database " & NewDBArray(DBCount).DBName & " has auto-grown by " & cint(PercentageTotal) & "% Since last check"
				End If
	 			If DO_DATAMB = "y" Then
 					DataLog 2,MegabytesTotal,"Database " & NewDBArray(DBCount).DBName & " has auto-grown by " & MegabytesTotal & "MB Since last check"
				End If
			End If
		Next DBCounty
	Next DBCount

'Update Old Array with NewDBArray Files

	For DBCount = 1 To (ubound(NewDBArray))
		If DO_DEBUG  = "y" Then				
'			Print #2 , Now() & "        " & "	Checking DB " & NewDBArray(DBCount).DBName
		End If

		'Cycle through each DB in the NewDB List and compare it to the oldDB List
			For DBCounty = 1 To ubound(DBArray)
				If NewDBArray(DBCount).DBName = DBArray(DBCounty).DBName Then
					If DO_DEBUG  = "y" Then				
 '						Print #2 , Now() & "        " & "	DB Exists in old DB Array update File Info"
					End If
					For DBcountx = 1 To 8
						DBArray(DBCounty).DBFiles(DBcountx).fileid = 0
						DBArray(DBCounty).DBFiles(DBcountx).size = 0
						DBArray(DBCounty).DBFiles(DBcountx).Maxsize = 0
						DBArray(DBCounty).DBFiles(DBcountx).Status = 0
						DBArray(DBCounty).DBFiles(DBcountx).LogicalName = ""
						DBArray(DBCounty).DBFiles(DBcountx).FileName = ""
					Next DBcountx

					For DBcountx = 1 To 8
						DBArray(DBCounty).DBFiles(DBcountx).fileid = NewDBArray(DBCount).DBFiles(DBcountx).fileid
						DBArray(DBCounty).DBFiles(DBcountx).size = NewDBArray(DBCount).DBFiles(DBcountx).size
						DBArray(DBCounty).DBFiles(DBcountx).Maxsize = NewDBArray(DBCount).DBFiles(DBcountx).Maxsize
						DBArray(DBCounty).DBFiles(DBcountx).Status = NewDBArray(DBCount).DBFiles(DBcountx).Status
						DBArray(DBCounty).DBFiles(DBcountx).LogicalName = NewDBArray(DBCount).DBFiles(DBcountx).LogicalName
						DBArray(DBCounty).DBFiles(DBcountx).FileName = NewDBArray(DBCount).DBFiles(DBcountx).FileName
					Next DBcountx
					DBArray(DBCounty).NoFiles = NewDBArray(DBCount).NoFiles
				End If
			Next DBCounty
	Next DBCount

	If DO_DEBUG  = "y" Then
'		Print #2 , Now() & "        " & "End Of Script, Move DB file's from new to Old : "
 '		If iterationcount() <> 1 Then
  '			Print #2 , Now() & "        " & "	Old DB"
   '			ret = printarray(DBArray)	
	'	End If
	 '		Print #2 , Now() & "        " & "	New DB"
	  '		ret = printarray(NewDBArray)	
	End If




If DO_DEBUG  = "y" Then
'	Print #2 , Now() & "        " & "Finished Checking DB's"
	Print #2 , Now() & "        " & "Script End"
	Close #2
End If

Exit Sub

GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


