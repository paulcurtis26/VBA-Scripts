'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### NT_SSICpuLoaded

'$Revision: 14 $

'### Begin KP-Version Section
Const AppManID = "3.0.361.8.14"
Const KSVerID = "3.0"
'Comment=  Changed to Command Post 3.0 Syntax
'### End KP-Version Section


'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors Loading on each CPU instance

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 4 5 1 1 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const NT_MachineFolder = ""
Const Application_Server = ""
Const IIST_Server = ""
Const EXHT_Server = ""
Const SQLT_Server = ""
Const MSMQT_Server = ""
Const PROXYT_Server = ""

'### End Type Section

'### Begin KPP Section

'### Author 		: ????
'### Description	: Monitors PerfMon Counters 
'### Changed by		: Dayanand Sankar (713) 245-1556
'### Date			: 6/1/97
'### Enhancements 	: -Initial Clear message 
'###				  -Also event messages are formatted to represent 
'###				   Counter, Value and Number with only spaces seperating these three entities.
'###
'### Changed by		: Paul Curtis
'### Date			: 22/1/99
'### Version 1.1	: 1.1
'### Enhancements 	: -Fixed problem with events have to be enabled to allow data collection
'###				   
'###
'### Changed by		: Paul Curtis
'### Date			: 22/7/99
'### Version 1.1	: 3.0
'### Enhancements 	: -Made Command Post 3.0 Compliant & Appmanager 3.0 Compliant
'###				   
'###

'*****************************   Needs to still be looked at 

' [V<Accept ObjectName, CounterName, InstanceName, and/or InstanceIndex to get a counter value, which is compared to EITHER threshold for EVERY Consecutive times. Refer to PerfMon for existence and spelling of names of each counter. (Version 3.0)>V]
' [A<When either Threshold is exceeded over or under, the selected action is taken.>A]
Const DO_EVENT = "y" '[M<Event? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" '[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERS = "y" '[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const TH_H = 80 '[M<Over High Threshold > >M][T<integer,1,' ',0,2e+009,#>T]
Const TH_L = 60 '[M<Over Low Threshold > >M][T<integer,1,' ',-1,2e+009,#>T]
Const ObjectName = "Processor" '[M<Single Object Name>M][T<string,80,',',>T]
Const CounterName = "% Processor time" '[M<Single Counter Name>M][T<string,80,',',>T]
Const InstanceName = "0" '[M<Instance Name, separated by comma w/ no space>M][T<string,80,',',>T]
Const InstanceIndex = "0" '[M<Instance Index, separated by comma w/ no space>M][T<string,80,',',>T]
Const ConsTimes = 1 '[M<Consecutive Times>M][T<integer,1,' ',0,99,#>T]
Const SevHigh = 6 '[M<Event Severity - New High>M][T<integer,1,' ',1,40,SevLevel>T]
Const SevLow = 8 '[M<Event Severity - New Low>M][T<integer,1,' ',1,40,SevLevel>T]
Const SEV_NOINST = 15 '[M<Event Severity - No counter/instance>M][T<integer,1,' ',1,40,SevLevel>T]
Const SEND_NORMAL = "y"			'[M<Send Mesage When CPU Loading is Normal (AutoClear Message) ? (y/n)>M] [T<String,1,,"yn">T]
Const AKPID = "AKP_NULL" ' [M<Action taken>M]

'### End KPP Section

'### Begin KPS Section

Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long

Dim NT As Object
Dim OBJ As Object
Const UNITNUMBER = "^^#"
Const NL = Chr$(10)
Const EVENTH = 3
Const EVENTL = 1
Const SevNoHigh = 40	
Const SevNoLow = 40		
Private resname As String
Private cH() As Integer
Private cL() As Integer
Private c0() As Integer
Private FirstClear() As Boolean
Private lastEvent() As Integer
Private cancelEvent() As Integer
Dim Machinenamestr As String

Function AlterString(sString As String, sCharToReplace As String, sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function



Sub	ParseString(ByVal InstName, ByRef insname$, ByRef parinsname$)
   Dim nPos As Integer
       nPos = InStr(InstName,"==>")
       If (nPos > 0) Then
           parinsname = Mid$(InstName,1, nPos - 2)
           insname = Right$(InstName,Len(InstName) - (nPos + 3))
	   Else
           insname = InstName
           parinsname = ""
       End If
End Sub

Sub DoInstance(parinsname As String, parindex As Integer,_ 
               insname As String, insindex As Integer, I As Integer)
	Dim dval As Double
	Dim detailmsg$
    Dim insnamecomp$  
	Dim tmpStr As String
	Dim ShrtMsg As String
	Dim cpuname As String

	'Composite instance name (i.e. with its index)
    If Item$(InstanceName,I,,",") <> "" Then 
	    insnamecomp = "\" & Item$(InstanceName,I,,",") & " (" & CStr(insindex) & ")"
		cpuname = "CPU\" & CStr(insindex) 
    Else
	    insnamecomp = Item$(InstanceName,I,,",")
    End If

	dval = OBJ.CounterValueEx(ObjectName, CounterName, insname, parinsname, parindex, insindex)

	If dval = -1 Then
		' report an error, but continue to the next instance and next interval 
		detailmsg = "Can't find counter for object\counter\instance " & ObjectName & "\" & CounterName & insnamecomp 
		ShortMsg = MachineNamestr & " " & AlterString(CounterName, " ", "-") & " Can't-Find-Counter" & " NULL"
		MSActions SEV_NOINST,ShortMsg , AKPID, resname, detailmsg
	ElseIf DO_EVENT = "y" Then
		'Decrement appropriate counters
		If dval > TH_H Then
			cH(I) = cH(I) - 1
		End If
		If dval > TH_L Then
			cL(I) = cL(I) - 1
		End If
		If dval <= TH_L Then
			c0(I) = c0(I) - 1
		End If

		'Check for zeroed counters, send event and reset if so.
		If cH(I) = 0 Then
			cL(I) = ConsTimes
			c0(I) = ConsTimes
			'If lastEvent(I) > 0 And lastEvent(I) <> EVENTH Then
			'	MSActions cancelEvent(I), CounterName & " " & insnamecomp & " changed state", AKPID, resname,""
			'End If
			If lastEvent(I) <> EVENTH Then
				tmpStr = Format$(dval, "0.000")
				detailmsg = "Counter value for " & ObjectName & ", " & CounterName & ", " & insnamecomp & _
							" is " & tmpStr & "; > TH = " & TH_H
				lastEvent(I) = EVENTH
				cancelEvent(I) = SevNoHigh
				If DO_NUMBERS = "y" Then
					ShrtMsg = MachineNamestr & " " & cpuname & " Over-High-threshold " & tmpStr
				Else
					ShrtMsg = MachineNamestr & " " & cpuname & " Over-High-threshold NULL"
				End If
				MSActions SevHigh, ShrtMsg, AKPID, resname, detailmsg
				FirstClear(I) = -1
			End If
		ElseIf cL(I) = 0 Then
			cH(I) = ConsTimes
			c0(I) = ConsTimes
			'If lastEvent(I) > 0 And lastEvent(I) <> EVENTL Then
			'	MSActions cancelEvent(I), CounterName & " " & insnamecomp & " changed state", AKPID, resname,""
			'End If
			If lastEvent(I) <> EVENTL Then
				tmpStr = Format$(dval, "0.000")
				detailmsg = "Counter value for " & ObjectName & ", " & CounterName & ", " & insnamecomp & _
							" is " & tmpStr & "; > TH = " & TH_L
				lastEvent(I) = EVENTL
				cancelEvent(I) = SevNoLow
				If DO_NUMBERS = "y" Then
					ShrtMsg = MachineNamestr & " " & cpuname & " Over-Low-threshold " & tmpStr
				Else
					ShrtMsg = MachineNamestr & " " & cpuname & " Over-Low-threshold NULL"
				End If
				MSActions SevLow, ShrtMsg, AKPID, resname, detailmsg
				FirstClear(I) = -1
			End If
		ElseIf c0(I) = 0 Then
			tmpStr = Format$(dval, "0.000")
			cH(I) = ConsTimes
			cL(I) = ConsTimes
			If lastEvent(I) > 0 Then
				If DO_NUMBERS = "y" Then
					ShrtMsg = MachineNamestr & " " & cpuname & " below-Low-threshold " & tmpStr
				Else
					ShrtMsg = MachineNamestr & " " & cpuname & " below-Low-threshold NUll"
				End If

				If SEND_NORMAL = "y" Then
					MSActions SevNoLow, ShrtMsg, AKPID, resname, detailmsg
				Else
					If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
						MSActions SevNoLow, ShrtMsg, AKPID, resname, detailmsg
					End If
				End If

				lastEvent(I) = 0
				cancelEvent(I) = 0
			End If
			sTemp = FirstClear(I)
			If FirstClear(I) <> -1 Then
				If DO_NUMBERS = "y" Then
					ShrtMsg = MachineNamestr & " " & cpuname & " NORMAL " & tmpStr
				Else
					ShrtMsg = MachineNamestr & " " & cpuname & " NORMAL NUll"
				End If
	
				If SEND_NORMAL = "y" Then
					MSActions SevNoLow, ShrtMsg, AKPID, resname, detailmsg
				Else
					If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
						MSActions SevNoLow, ShrtMsg, AKPID, resname, detailmsg
					End If
				End If

				FirstClear(I) = -1
			End If
		End If
	End If
	If DO_DATA = "y" And dval <> -1 Then
		If IterationCount() = 1 Then                
			DataHeader "Counter Value - " & ObjectName & " : " & CounterName & " : " & insnamecomp & UNITNUMBER, 0, I
		End If
		DataLog I, dval, ""
	End If
	
End Sub

Sub Main()
    Dim parinsname$
	Dim insname$
    Dim parinsindex$
    Dim instindex$
    Dim detailmsg$

    Dim InstArr() As String
    Dim fError As Boolean
    Dim A As Integer
    Dim B As Integer
    Dim J As Integer
    Dim Q As Integer
	Dim size As Integer

	If iterationcount() = 1	Then
	    Dim NameSize As Long
    	Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
	    X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))
	End If

    If TH_H < TH_L Then
		detailmsg = "Value of higher threshold cannot be less than the lower threshold values."
		fError = TRUE
		GoTo ErrOut
    End If

    fError = False
    detailmsg = ""

	Set NT = CreateObject("NetiQAgent.NT")
	Set OBJ = NT.System

    A = ItemCount(InstanceName,",")
    B = ItemCount(InstanceIndex,",")
	If A < 1 Then
		size = 1
	Else
		size = A
	End If
	ReDim Preserve cH(size) 
	ReDim Preserve cL(size) 
	ReDim Preserve c0(size)
	ReDim Preserve FirstClear(size)
	ReDim Preserve lastEvent(size) 
	ReDim Preserve cancelEvent(size) 

	If IterationCount() = 1 And DO_EVENT = "y" Then
		If NT_MachineFolder <> "" Then	'meaning the KS was dropped in Master or NT view
			resname = ""				'so, always blink the NT machine
		ElseIf SQLT_Server <>"" Then
			resname = "SQLT_Server = " & SQLT_Server
		ElseIf EXHT_Server <> "" Then
			resname = "EXHT_Server = " & EXHT_Server
		ElseIf IIST_Server <> "" Then
			resname = "IIST_Server = " & IIST_Server
		ElseIf MSMQT_Server <> "" Then
			resname = "MSMQT_Server = " & MSMQT_Server
		ElseIf PROXYT_Server <> "" Then
			resname = "PROXYT_Server = " & PROXYT_Server
		ElseIf Application_Server <> "" Then 
			resname = "Application_Server = " & Application_Server
		Else
			resname = ""
		End If
		For Q = 1 To size
			cH(Q) = ConsTimes
			cL(Q) = ConsTimes
			c0(Q) = ConsTimes
			lastEvent(Q) = 0
			cancelEvent(Q) = 0
			FirstClear(Q) = -1
		Next Q
 	End If

    'Look for duplicate instance name. If there is such and user does not give (sufficient) instance indices then flag error
    If (A >= 1) Then
        ReDim InstArr(A)
        For Q = 1 To A
          InstArr(Q) = Item$(InstanceName,Q,,",")
        Next Q
        ArraySort InstArr()	'Sort the array ascendingly
        For Q = 1 To A
           For J = (Q+1) To A
             If ((A <> B) And (InstArr(Q) = InstArr(J))) Or (A < B) Then
                fError = True
                detailmsg = "Non-matching # of instance names, and/or instance indices."
                GoTo ErrOut
             End If
          Next J
        Next Q
    End If

    If (A > 1) Then 
        For Q = 1  To A
          	instindex = Item$(InstanceIndex,Q,,",")
            If instindex = "" Then
                instindex = "0"
            End If
	        ParseString  Item$(InstanceName,Q,,","), insname, parinsname
	        DoInstance parinsname, 0, insname, CInt(instindex), Q
        Next Q
    Else  
	    ParseString  InstanceName, insname, parinsname
        DoInstance parinsname, 0, insname, CInt(IIf(InstanceIndex = "","0",InstanceIndex)), 1
    End If              

ErrOut:
    If (fError) Then
       If DO_EVENT = "y" Then
          MCAbort resname, detailmsg
       End If
    End If
End Sub

'### End KPS Section


