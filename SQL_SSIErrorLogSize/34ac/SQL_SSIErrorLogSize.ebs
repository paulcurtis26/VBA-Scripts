'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSIErrorLogSize

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the SQL error Log File. if Log File is larger than the specified threshold, the selected action is taken.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server = ""

'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the Error Log file size. When the log File size exceeds the threshold, an event is raised. (Version 3.4ac)>V]
' [A<When the log File size exceeds the threshold, the selected action is taken.>A]
Const DO_EVENTTH = "y" 		'[M<Event For Threshold Checking? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTDB = "y" 		'[M<Event For Error Log Sizes? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERS = "y" 		'[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const DO_CYCLE = "y" 		'[M<Cycle Error log? (y/n)>M][T<string,1,' ',yn">T]
Const TH_SIZE = 0.5 		'[M<Error Log Size > >M][T<integer,1,' ',0,9999,KiloBytes>T]
Const CONSEC_TIME = 3 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const Severity = 5 			'[M<Event Severity>M][T<integer,1,' ',1,39,SevLevel>T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Const SEND_NORMAL = "y" 	
Const DO_DATA = "n" 		
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim DO_DEBUG As String
Dim Openfilefail As Boolean
Dim Machinenamestr As String
Dim resname$

Private SizeFailCount As Integer
Private SizeClearCount As Integer
Private SizeEventFired As Boolean

Global Const DONTCARE = -1&
Global Const AUTO_START = 2&
Global Const REG_SZ As Long = 1
Global Const HKEY_LOCAL_MACHINE = &H80000002 
Global Const ERROR_NONE = 0
Global Const GENERIC_READ = &H80000000 

Declare Function RegCloseKey Lib "advapi32.dll" _ 
		(ByVal hKey As Long) As Long 
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias _ 
		"RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _ 
		ByVal ulOptions As Long, ByVal samDesired As Long, ByRef phkResult As Long) As Long 
Declare Function RegQueryValueExString Lib "advapi32.dll" Alias _ 
		"RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _ 
		String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
		As String, lpcbData As Long) As Long 	


'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function

Function GetErrorLogPath(ArgNumber As Integer) As String
	Dim lRetVal&, hKey&, ValLen&, DataName$, DataLen&, rc&,subkey As String
	
	GetInstallPath = ""
	lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "SOFTWARE\Microsoft\MSSQLSERVER\MSSQLSERVER\Parameters", 0, _
		GENERIC_READ, hKey)
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "		Return Value from open key function " &   lRetVal
	End If
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataLen = 256
	DataName = String$(DataLen, 0)	
	subkey = "SQLArg" & trim(str(ArgNumber))
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "		Sub Key to check " & subkey
	End If
	lRetVal = RegQueryValueExString(hKey, SubKey, 0&, REG_SZ, DataName, DataLen)
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "		Return Value " &   lRetVal
	End If
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataName = Left$(DataName, DataLen-1)
	DataName = Trim$(DataName)
	GetErrorLogPath = DataName
OUT:
	lRetVal = RegCloseKey (hKey)
End Function


Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Function CycleErrorLog() As Boolean
	
	Dim SQL As Object
	Dim Server As Object
	Dim passwd As String
	Dim errorcode As Long
	Dim CurrentCount As Long
	Dim	AgtMsg As String
	Dim	strErrorMsg As String
	Dim	Legend As String
	Dim sqlcmd As String
	Dim eventmsg As String
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	passwd = GetSqlPassword("", "sa")

	sqlcmd = "EXEC sp_cycle_errorlog"
	'Check how this should be represented should it be select count(*) from sysproccesses gives same count as sp_who
	CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Cycling Error Log File"
	End If
	If ErrorCode < 0 Then
		eventmsg = Machinenamestr & " " &  "ERRORLOG-CYCLE FAILED NULL"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Cycling the Error log Failed"
		End If
		CycleErrorLog = false
		Exit Function
	Else
		eventmsg = Machinenamestr & " " &  "ERRORLOG-CYCLE SUCCESS NULL"
		MSActions Severity, eventmsg, AKPID, resname, "Cycled Error log, so a new Error log has been started"
	End If
	CycleErrorLog = true

End Function



Sub Main()
	'On Error GoTo main_error
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String

	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
	Dim AgntMsg As String

	Dim Param As Integer
	Dim Errorlogpath As String 

	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))
		SizeEventFired = false
		SizeFailCount= 0 
		SizeClearCount=0
	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSIErrorLogSize" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If
	End If

	' Check for 10 different parameters to the SQL Server, one should be the error log
	' It is unlikely that there will ever be more that 10 Argumants to the SQL Server EXE
	For Param = 0 To 10 
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Checking for SQL Server Parameter " & str(Param)
		End If
		Errorlogpath = GetErrorLogPath(Param)
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "		Parameter " & str(Param) & " : " & Errorlogpath
		End If
		If Errorlogpath = "" Then
			Exit For
		End If
		If left(Errorlogpath,2) = "-e" Then
			Exit For
		Else
			Errorlogpath =""
		End If
	Next Param

	If Errorlogpath <> "" Then
		Errorlogpath = right(Errorlogpath,Len(Errorlogpath)-2)
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "SQL Server Error log Path found as " & Errorlogpath
		End If
	Else
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "	Error log Path Not Found in registry"
		End If
		Shortmsg = Machinenamestr & " ERRORLOG ERROR NULL"
		MSActions Severity, Shortmsg, AKPID, resname, " ERRORLOG Path not Found in Registry"
		mcabort resname,Machinenamestr & " ERRORLOG Path not Found in Registry"
	End If	

	resname = "SQLT_Server = " & SQLT_Server


	If (FileExists(Errorlogpath) And (FileLen(Errorlogpath) <> 0)) Then
		ErrlogFilesize = FileLen(Errorlogpath)/1024
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "	Length Of SQL Error Log File is " & ErrlogFilesize
		End If
	Else
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "	Either Files not Found or File Size is 0 bytes"
		End If
		Shortmsg = Machinenamestr & " ERRORLOG ERROR NULL"
		MSActions Severity, Shortmsg, AKPID, resname, " ERRORLOG File Size not Retrived"
		mcabort resname,Machinenamestr & " ERRORLOG File Size not Retrived"
	End If


	If DO_EVENTDB = "y" Then
		eventmsg = Format$(ErrlogFilesize, "0.00") & "Kb"
		longm = "The error log (" & ErrorLogPath & ")'s size is " & Format$(ErrlogFilesize, "0.00") & "Kb"
		If DO_NUMBERS = "y" Then
			eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " SIZE " & eventmsg
		Else
			eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " SIZE NULL"
		End If
		MSActions 39, eventmsg, AKPID, resname, longm
	End If


	If DO_EVENTTH = "y" Then
	  	If DO_DEBUG  = "y" Then
	  		Print #2 , Now() & "        " & "Checking Event log Threshold"
	  	End If

		If ErrlogFilesize > TH_SIZE   Then
			eventmsg = Format$(ErrlogFilesize, "0.00") & "Kb"
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Error Log size in Kb is Above threshold"
				Print #2 , Now() & "        " & "		Size in Kb returned is " & ErrlogFilesize
				Print #2 , Now() & "        " & "		Threshold set is " & str(TH_SIZE) & "Kb"
				Print #2 , Now() & "        " & "		Incrementing count for condition Failure"
			End If		
   			longm = "The error log (" & ErrorLogPath & ")'s size is " & Format$(ErrlogFilesize, "0.00") & "Kb ; <TH = " & CStr(TH_SIZE) & "Kb " & chr$(10)
			SizeFailCount = SizeFailCount + 1
			SizeClearCount = 0 
			If SizeFailCount >= CONSEC_TIME Then

				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "	Number of Consec times set is " & str(CONSEC_TIME)
					Print #2 , Now() & "        " & "	Number of times the Size Kb has been Above Threshold is " & str(SizeFailCount)
					Print #2 , Now() & "        " & "	Firing Event as condition for Size Kb has been met required number of times"										
				End If
				If DO_NUMBERS = "y" Then
					eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " EXCEEDED " & eventmsg
				Else
					eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " EXCEEDED NULL"
				End If
				If DO_CYCLE = "y" Then
					Dim CycleRet As Boolean
					CycleRet = CycleErrorLog()	
				End If				
				If CycleRet = false Then
					SizeEventFired = true
					MSActions Severity, eventmsg, AKPID, resname, longm
					eventmsg = ""
				End If
				SizeFailCount = 0 
			ElseIf ErrLogFileSize < TH_SIZE Then
				eventmsg = Format$(ErrLogFileSize, "0.00") & "Kb"
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Error Log Size in Kb is Below threshold"
					Print #2 , Now() & "        " & "		Size in Kb returned is " & ErrlogFilesize
					Print #2 , Now() & "        " & "		Threshold set is " & str(TH_SIZE) & "Kb"
					Print #2 , Now() & "        " & "		Incrementing count for condition Alright"
				End If
	   			longm = "The error log (" & ErrorLogPath & ")'s size is " & Format$(ErrlogFilesize, "0.00") & "Kb ; >TH = " & CStr(TH_SIZE) & "Kb " & chr$(10)
				SizeFailCount = 0
				SizeClearCount = SizeClearCount + 1

				If SizeClearCount >= CONSEC_TIME And SizeEventFired = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
						Print #2 , Now() & "        " & "		Number of times the Error log Size has been Below Threshold is " & str(SizeFailCount)
						Print #2 , Now() & "        " & "		Condition for Error Log Size has been met required number of times"										
						Print #2 , Now() & "        " & "			and an event has been sent to report that threshold has been exeeded so run AutoClear section"										
					End If

					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " NORMAL " & eventmsg
					Else
						eventmsg = Machinenamestr & " " &  AlterString(ErrorlogPath, " ", "-") & " NORMAL NULL"
					End If

					If SEND_NORMAL = "y" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
								Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
							End If
							MSActions 40, eventmsg, AKPID, resname, longm
						End If
					End If
					SizeEventFired = false
					SizeClearCount = 0 
				End If
			End If
		End If
	 End If
		If DO_DATA = "y" Then
			If IterationCount() = 1 Then
				DataHeader "Error Log Size (" & ErrorlogPath & ") space^^Kb", 0, 1
 			End If
			datastring = "SQL Server Error Log Size = " & Format$(ErrLogFileSize, "0.00") & "Kb" & chr$(10) 
			datastring = datastring & "Error Log Located at " & ErrorlogPath
			DataLog 1, ErrLogFileSize, datastring

		End If

		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Finished Checking Errorlog " & ErrorlogPath
		End If
If DO_DEBUG  = "y" Then

	Close #2
End If

GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


