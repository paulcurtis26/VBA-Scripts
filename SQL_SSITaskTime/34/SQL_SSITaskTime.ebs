'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSITaskTime

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the time a Scheduled task has been running, if the time is higher than than the specified threshold, the selected action is taken.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 2 15 1 1 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server  = ""
'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the time a Scheduled task has been running, if the time is higher than than the specified threshold, an event is raised. (Version 3.4)>V]
' [A<When the a Task time is higher than the threshold, the selected action is taken.>A]
Const DO_EVENTTH = "y" 		'[M<Event For Threshold Checking? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" 		'[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERS = "y" 		'[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const SEND_NORMAL = "y" 	'[M<Send Event when Task Time is Normal? (y/n)>M][T<string,1,' ',yn">T]
Const TH_TIME = 1	 		'[M<Threshold for script execution Time > >M][T<integer,1,' ',0,9999,Seconds>T]
Const CONSEC_TIME = 1 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const Severity = 5 			'[M<Event Severity>M][T<integer,1,' ',1,40,SevLevel>T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim Server As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean

Private FreeFailCount As Integer
Private FreeClearCount As Integer
Private FreeEventFired As Boolean

Private UtilFailCount As Integer
Private UtilClearCount As Integer
Private UtilEventFired As Boolean

Type TASKS
	lastrunduration As Double
	ProgramName As String
	timerunning As Double
	TaskID As Integer
	TaskName As String
	Command As String
	spid As Integer
	FailCount As Integer
	Eventfired As Boolean
	cleared As Boolean
	NewTask As Boolean
End Type

Dim OldTaskArray() As TASKS

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

'Easy way to print out Array Element.

Function DebugPrintTask(ByRef taskarray() As TASKS,PrntLine As String) As Integer
If DO_DEBUG = "y" Then
	Print #2 , Now() & "        " & PrntLine
	If arraydims(taskarray()) > 0 Then
		Print #2 , Now() & "        " & " Number of Array Elements:	"	& ubound(taskarray())
		For Taskcounter = 0 To ubound(taskarray())-1
			Print #2 , Now() & "        " & " Task Number :	" & TaskCounter
			Print #2 , Now() & "        " & "				lastrunduration	" & taskarray(TaskCounter).lastrunduration
			Print #2 , Now() & "        " & "				ProgramName		" & taskarray(TaskCounter).ProgramName
			Print #2 , Now() & "        " & "				timerunning		" & taskarray(TaskCounter).timerunning
			Print #2 , Now() & "        " & "				TaskID			" & taskarray(TaskCounter).TaskID
			Print #2 , Now() & "        " & "				TaskName		" & taskarray(TaskCounter).TaskName
			Print #2 , Now() & "        " & "				Command			" & taskarray(TaskCounter).Command
			Print #2 , Now() & "        " & "				spid			" & taskarray(TaskCounter).spid
			Print #2 , Now() & "        " & "				FailCount		" & taskarray(TaskCounter).FailCount
			Print #2 , Now() & "        " & "				Eventfired		" & taskarray(TaskCounter).Eventfired
			Print #2 , Now() & "        " & "				cleared			" & taskarray(TaskCounter).cleared
			Print #2 , Now() & "        " & "				NewTask			" & taskarray(TaskCounter).NewTask
		Next Taskcounter
	Else
		Print #2 , Now() & "        " & "Array has no Elements"
	End If
End If
End Function

Sub Main()
	On Error GoTo main_error
	Dim resname$
	resname = "SQLT_Server = " & SQLT_Server
	
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
 	Dim AgtMsg As String
	Dim strErrorMsg As String
	Dim ErrorCode As Long
  	Dim CurTasks As Double
	Dim MaxConn As Integer
	Dim AvailLock As Integer
	Dim FileErrNum As Integer
	Dim sqlcmd As String
	Dim Taskcounter As Integer
	Dim PrintRet As Integer
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	Dim tmpTaskArray() As TASKS
	Dim NewTaskArray() As TASKS
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))
		If DO_DATA = "y" Then
			DataHeader "Tasks Exceeding Set Running time^^#", 0, 1
		End If
	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSITaskTime" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false  
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If

	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Lock	
	passwd = GetSqlPassword("", "sa")

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting Tasks that have been running over threshold"
	End If
	'This builds up a select statement, to retrieve all the tasks that have a running duration over the threshold set by
	'the user. This will only return failed rows of a type TSQL. If this needs to monitor CMD commands a different select
	'Statement will need to be built up.
	sqlcmd = "select convert(char(12),st.lastrunduration) + CHAR(44),program_name + CHAR(44)," & Chr(39) & "Timerunning" & Chr(39) & " = convert(char(12),datediff(ss,login_time,getdate()))+ CHAR(44)," & Chr(39) & "msdb Task ID" & Chr(39) 
	sqlcmd = sqlcmd & "= SUBSTRING(program_name,CHARINDEX(" & Chr(39) & "#" & Chr(39)
	sqlcmd = sqlcmd & ",program_name)+1,3)+ CHAR(44),st.name+ CHAR(44),st.command + CHAR(44),spid from "
	sqlcmd = sqlcmd & "master..sysprocesses, msdb..systasks st where program_name like " 
	sqlcmd = sqlcmd & Chr(39) & "SQLEXEC - TSQL Task%" & Chr(39) & " and " 
	sqlcmd = sqlcmd & "convert(int,SUBSTRING(program_name,CHARINDEX(" & Chr(39) & "#" & Chr(39) & ",program_name)+1,3)) "
	sqlcmd = sqlcmd & " = st.id and datediff(ss,login_time,getdate()) > " & (TH_TIME * 60)

	CurTasks = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "RunSqlValue Error code	: " & ErrorCode
		Print #2 , Now() & "        " & "RunSqlValue Error Msg	: " & strErrorMsg
		Print #2 , Now() & "        " & "		Number of tasks :" & CurTasks
		Print #2 , Now() & "        " & "				SQLCmd	: " & sqlcmd
		Print #2 , Now() & "        " & "				AgntMsg	: " & AgtMsg
	End If

	If ErrorCode < 0 Then
		CurConn = -1
		MaxConn = -1
		util = -1
		eventmsg = "Failed to get # of current connections"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
		End If
		GoTo continue
	End If

	If CurTasks = 0 Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & " No Tasks have returned with running time over threshold"
		End If
		'GoTo continue
	Else
		ReDim NewTaskArray(CurTasks)
		' This cycles through the lines returned from the Agnt Message in the MO call RunSQLValue
		'The agnt message contains the rows from the select statement.
		'The code below only processes the lines after line 2, this is because the agnt message always
		'Contain two line, one with the column names and the other with "-------" in it.
		'Part of the select statements task is to wrap each column with a "," this allows the functions
		'Item$ to work easier as there are , to find
		For Taskcounter = 0 To (CurTasks + 1)
			If Taskcounter > 1 Then
				'If DO_DEBUG  = "y" Then				
				'	Print #2 , Now() & "        " & cdbl(Item$(line$(AgtMsg,Taskcounter + 1), 1 ,, ","))
				'	Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,Taskcounter + 1), 2 ,, ","))
				'	Print #2 , Now() & "        " &	cdbl(Item$(line$(AgtMsg,Taskcounter + 1), 3 ,, ","))
				'	Print #2 , Now() & "        " &	cint(Item$(line$(AgtMsg,Taskcounter + 1), 4 ,, ","))
				'	Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,Taskcounter + 1), 5 ,, ","))
				'	Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,Taskcounter + 1), 6 ,, ","))
				'	Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,Taskcounter + 1), 7 ,, ","))
				'End If
				NewTaskArray(TaskCounter - 2).lastrunduration = cdbl(Item$(line$(AgtMsg,Taskcounter + 1), 1 ,, ","))
				NewTaskArray(TaskCounter - 2).ProgramName = trim(Item$(line$(AgtMsg,Taskcounter + 1), 2 ,, ","))
				NewTaskArray(TaskCounter - 2).timerunning = cdbl(Item$(line$(AgtMsg,Taskcounter + 1), 3 ,, ","))
				NewTaskArray(TaskCounter - 2).TaskID = cint(Item$(line$(AgtMsg,Taskcounter + 1), 4 ,, ","))
				NewTaskArray(TaskCounter - 2).TaskName = trim(Item$(line$(AgtMsg,Taskcounter + 1), 5 ,, ","))
				NewTaskArray(TaskCounter - 2).Command = trim(Item$(line$(AgtMsg,Taskcounter + 1), 6 ,, ","))
				NewTaskArray(TaskCounter - 2).spid = trim(Item$(line$(AgtMsg,Taskcounter + 1), 7 ,, ","))
				NewTaskArray(TaskCounter - 2).FailCount = 0
				NewTaskArray(TaskCounter - 2).Eventfired = false
				NewTaskArray(TaskCounter - 2).cleared = false
				NewTaskArray(TaskCounter - 2).NewTask = false
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " & " Filled Array Element " & (TaskCounter - 2)
				End If
			End If
		Next Taskcounter

	 End If

	'the newtaskarray contains the rows that have been returned by the select statement.

	If DO_DEBUG  = "y" Then
		PrintRet = DebugPrintTask(NewTaskArray," New Task Array")
	End If

	If DO_EVENTTH = "y" Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Checking thresholds for TASKS"
		End If

		'Set all Old Tasks to have Cleared Flag set to true
		'Cycle through new Tasks Found and compare spid and task ID to tasks in Old task Array
		'if there is no match then this is a new task so Add row to Old Task with Cleared set to false
		'If there is a match then increment Failcount in Old Array and Set Cleared to False
		'The Tasks left with Cleared Flag set to true have actually been cleared, so send auto clear
		'if eventfired = true and do not copy these ones over to "new" old array
		'If consec times has been met then fire event set eventfired to true and copy element to "new" old array
		'If Consec Times not met copy to "new" old array

		If arraydims(OldTaskArray()) = 0 And arraydims(NewTaskArray()) <> 0 Then
			'If there are no OldTasks but there are NewTasks then all NewTasks are set to New
			'NewTasks actually contains all new tasks discovered this iteration, as oppose to tasks that
			'have not been seen before, the code below works out the difference.
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	No Old Tasks to check against"
				Print #2 , Now() & "        " & "	but there are new tasks"
			End If
			'No Tasks exist so nothing to update
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(NewTaskArray," Updating New Task Array")
			End If

			If arraydims(NewTaskArray()) <> 0 Then
				For newArrayCount = 0 To ubound(NewTaskArray())
						NewTaskArray(newArrayCount).newtask = true
				Next newArrayCount
			End If
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(NewTaskArray," Updated New Task Array")
			End If
		ElseIf arraydims(OldTaskArray()) <> 0 And arraydims(NewTaskArray()) = 0 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	No New Tasks Have Been found update old tasks"
			End If
			'Update all old tasks to be cleared, as if the NewTasks is empty no tasks are still running.
			For OldArrayCount = 0 To ubound(OldTaskArray())
				oldTaskArray(OldArrayCount).cleared = true
			Next OldArrayCount
		ElseIf arraydims(OldTaskArray()) <> 0 And arraydims(NewTaskArray()) <> 0    Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	Old Tasks have been found so updating them all to be Cleared"
				Print #2 , Now() & "        " & "		any tasks not to be cleared will have this flag over written later"
			End If
			For OldArrayCount = 0 To ubound(OldTaskArray())
				oldTaskArray(OldArrayCount).cleared = true
			Next OldArrayCount
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	New Tasks have been found so loop around and"
				Print #2 , Now() & "        " & "		try to match up new and old tasks"
			End If

			For newArrayCount = 0 To ubound(NewTaskArray()) - 1
				For OldArrayCount = 0 To ubound(OldTaskArray()) - 1
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	Checking Old Task Element " & str(OldArrayCount) & " and New Task Element " & str(newArrayCount)
					End If

					If NewTaskArray(newArrayCount).spid = oldTaskArray(oldArrayCount).spid And NewTaskArray(newArrayCount).taskid = oldTaskArray(oldArrayCount).taskid Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	New Tasks and Old Task match so update Failcount"
						End If
						'This is a old element so update
						oldTaskArray(oldArrayCount).FailCount = oldTaskArray(oldArrayCount).FailCount + 1
						oldTaskArray(oldArrayCount).timerunning = NewTaskArray(newArrayCount).timerunning
						oldTaskArray(oldArrayCount).lastrunduration = NewTaskArray(newArrayCount).lastrunduration
						oldTaskArray(OldArrayCount).cleared = false
						NewTaskArray(newArrayCount).newtask = false
						OldArrayCount = ubound(OldTaskArray()) - 1
						Exit For
						' If this loop is not exited at this point the next iteration will set the NewTask flag
						' Back to true as there can only be one that matches and this was it all other iterations will not 
						'Match
					Else
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	New Tasks not found so mark as newtask"
						End If
						NewTaskArray(newArrayCount).newtask = true
					End If					
				Next OldArrayCount
			Next newArrayCount
		ElseIf arraydims(OldTaskArray()) = 0 And arraydims(NewTaskArray()) = 0 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	No New Tasks Found and No Old Tasks so nothing to do"
			End If
			ReDim OldTaskArray()
			GoTo continue
		End If

		If arraydims(oldTaskArray()) <> 0 And arraydims(NewTaskArray()) <> 0 Then
			' Any elements in the NewTaskArray that have the NewTask Flag set were not matched up
			' In the last section of code so they need to be copied over to the old array
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(NewTaskArray," NewTaskArray before updating")
				PrintRet = DebugPrintTask(oldTaskArray," oldTaskArray before updating")
			End If
			
			For newArrayCount = 0 To ubound(NewTaskArray()) - 1
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "	Check each task in NewTaskArray, if NewTask Flag is still set"
					Print #2 , Now() & "        " & "		Then no match with OldTaskArray could be found"
					Print #2 , Now() & "        " & "		so increase OldTaskArray elements by one and copy new"
					Print #2 , Now() & "        " & "		task info into the new element in oldTaskArray"
				End If
 				If NewTaskArray(newArrayCount).newtask = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	OldTaskArray contains " & ubound(oldTaskArray()) & " Elements"
					End If
					OldTaskArrayCount = ubound(oldTaskArray())
					ReDim Preserve oldTaskArray(OldTaskArrayCount +1)
					OldTaskArrayCount = ubound(oldTaskArray()) - 1
					OldTaskArray(OldTaskArrayCount).lastrunduration = NewTaskArray(newArrayCount).lastrunduration
					OldTaskArray(OldTaskArrayCount).ProgramName = NewTaskArray(newArrayCount).ProgramName 
					OldTaskArray(OldTaskArrayCount).timerunning = NewTaskArray(newArrayCount).timerunning 
					OldTaskArray(OldTaskArrayCount).TaskID = NewTaskArray(newArrayCount).TaskID 
					OldTaskArray(OldTaskArrayCount).TaskName = NewTaskArray(newArrayCount).TaskName 
					OldTaskArray(OldTaskArrayCount).Command = NewTaskArray(newArrayCount).Command 
					OldTaskArray(OldTaskArrayCount).spid = NewTaskArray(newArrayCount).spid 
					OldTaskArray(OldTaskArrayCount).FailCount = 1
					OldTaskArray(OldTaskArrayCount).Eventfired = false
					OldTaskArray(OldTaskArrayCount).cleared = false
					OldTaskArray(OldTaskArrayCount).NewTask = false 
				End If
			Next newArrayCount
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(oldTaskArray," OldTaskArray After updating")
			End If

		ElseIf arraydims(NewTaskArray()) <> 0 And arraydims(oldTaskArray()) = 0 Then
			ReDim oldtaskarray(ubound(newtaskarray()))
			For newtaskarraycount = 0 To ubound(newtaskarray())
				oldTaskArray(newtaskarraycount) = NewTaskArray(newtaskarraycount)
				oldTaskArray(newtaskarraycount).FailCount = oldTaskArray(newtaskarraycount).FailCount + 1
			Next newtaskarraycount
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(NewTaskArray," NewTaskArray After Copy")
				PrintRet = DebugPrintTask(OldTaskArray," OldTaskArray After Copy")
			End If
				
		End If

		' At this point all the tasks in the NewTaskArray have either been added to the Oldarray if they do not exist already
		' or the element that matches in the Oldarray has been updated.
		' Next each element of the Old Array needs to be checked and one of three things must happen
		' either:
		' The Cleared Flag is set so if an event has been fired then send an AutoClear message, and do not copy this 
		' element to the temp array
		' or
		' The failedcount = CONSEC_TIMES so fire event and set EventFired Flag to True and FailCount to 0
		' or
		' Neither of the above conditions are true so the element just needs to be copied to the temp Array, with an increased
		' Fail count.

		If DO_DEBUG  = "y" Then
			PrintRet = DebugPrintTask(OldTaskArray," OldTaskArray before proccessing takes place")
		End If

		If arraydims(OldTaskArray()) = 0 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	No Old Tasks to Process"
			End If
			'No Tasks exist so nothing to update
		Else
			For OldArrayCount = 0 To ubound(OldTaskArray())-1
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "	Cycle through OldTaskArray and Process elements"
				End If
				' Previous code has set this event to be cleared, as the task is no longer running.
				If oldTaskArray(OldArrayCount).cleared = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	OldTaskArray Element has been set to clear"
						Print #2 , Now() & "        " & "	so Check EventFired"
					End If
					' Task has previously fired an event so send autoclear.
					If OldTaskArray(OldArrayCount).Eventfired = true Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	Event Fired is set to true so send auto clear if SEND_NORMAL is True"
						End If
						OldTaskArray(OldArrayCount).Eventfired=false
						eventmsg = Machinenamestr & " TASK-" & trim(str(OldTaskArray(OldArrayCount).taskid)) & "-" & "spid-" & trim(str(OldTaskArray(OldArrayCount).spid)) & " NORMAL NULL"
						longm = "The Task " & OldTaskArray(OldArrayCount).TaskName & " is no longer Running" & chr$(10)
						longm = longm & "Command for this task is " & chr$(10)
						longm = longm & OldTaskArray(OldArrayCount).Command & chr$(10)
						longm = longm & "The last time this task was checked before it completed," & chr$(10)
						longm = longm & "it had been running for " & str(int(OldTaskArray(OldArrayCount).timerunning/60)) & " Minutes" & chr$(10)
						longm = longm & "spid for this task was " & OldTaskArray(OldArrayCount).spid
						If SEND_NORMAL = "y" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
							End If
							MSActions 40, eventmsg, AKPID, resname, longm
						Else
							If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
								If DO_DEBUG  = "y" Then
									Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
									Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
								End If
								MSActions 40, eventmsg, AKPID, resname, longm
							End If
						End If
					Else
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	Event Fired is set to false so do nothing"
						End If
					End If
				'Consec times has been met and the event is not set to be cleared
				ElseIf OldTaskArray(OldArrayCount).failcount = CONSEC_TIME And oldTaskArray(OldArrayCount).cleared = false Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	Failcount for this task is = to CONSEC_TIMES and the task has not cleared"
						Print #2 , Now() & "        " & "	so send EXCEEDED Event"
					End If

					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " TASK-" & trim(str(OldTaskArray(OldArrayCount).taskid)) & "-" & "spid-" & trim(str(OldTaskArray(OldArrayCount).spid)) & " EXCEEDED " & str(int(OldTaskArray(OldArrayCount).timerunning/60))
					Else
						eventmsg = Machinenamestr & " TASK-" & trim(str(OldTaskArray(OldArrayCount).taskid)) & "-" & "spid-" & trim(str(OldTaskArray(OldArrayCount).spid)) & " EXCEEDED NULL"
					End If
					longm = "The Task " & Chr(34) & OldTaskArray(OldArrayCount).TaskName & Chr(34) & " is Running" & chr$(10)
					longm = longm & "This task has been running for " & str(int(OldTaskArray(OldArrayCount).timerunning/60)) & " Minutes" & chr$(10)
					longm = longm & "and has exceeded the threshold for running tasks set at " & str(TH_TIME) & " Minutes " & chr$(10)
					longm = longm & "This tasks has exceeded the thrshold for running time the required Consecutive Times (" & str(CONSEC_TIME) & " Times)" & chr$(10)
					longm = longm & "Command for this task is " 
					longm = longm & OldTaskArray(OldArrayCount).Command & chr$(10)
					longm = longm & "spid for this task is " & OldTaskArray(OldArrayCount).spid
					MSActions Severity, eventmsg, AKPID, resname, longm
					OldTaskArray(OldArrayCount).eventfired = true
					OldTaskArray(OldArrayCount).FailCount = 0
					If DO_DATA = "y" Then
						datastring = "Task Exceeded Running time= " & OldTaskArray(OldArrayCount).TaskName & chr$(10) 
						datastring = datastring & "spid of Task " & OldTaskArray(OldArrayCount).spid & chr$(10) 
						datastring = datastring & "LastRunDuration of Task " & str(int(OldTaskArray(OldArrayCount).LastRunDuration/60)) & chr$(10) 
						datastring = datastring & "Command of Task " & OldTaskArray(OldArrayCount).Command & chr$(10) 
						datastring = datastring & "Time Running= " & str(int(OldTaskArray(OldArrayCount).timerunning/60)) & chr$(10)			
						DataLog 1, int(OldTaskArray(OldArrayCount).timerunning/60), datastring
					End If

				ElseIf OldTaskArray(OldArrayCount).failcount <> CONSEC_TIME And oldTaskArray(OldArrayCount).cleared = false Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	OldTaskArray element is still running but CONSEC_TIMES has not been met"
					End If
				End If
				' If an element is not set to be cleared, it needs to me rememebered for next iteration.
				' The OldTaskArray currently contains all elements, including those that have cleared.
				' So this code only copies the elements from OldTaskArray to TmpTaskArray that are not set to be cleared.
				' Once this has been done the oldTaskArray is cleared out and the tmpArray is copied back. This leaves
				' Only the elemenst that should be remembered, in the OldTaskArray
				If oldTaskArray(OldArrayCount).cleared = false Then	
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	Copy element from OldTaskArray to tmpTaskArray as the flag for it being cleared is not set"
					End If
					If arraydims(tmpTaskArray()) <> 0 Then
						ReDim Preserve tmpTaskArray(ubound(tmpTaskArray()) +1)
						TmpTaskArrayCount = ubound(tmpTaskArray()) - 1
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	TmpTaskArray Already Exists"
							Print #2 , Now() & "        " & "		Ubound = " & ubound(tmpTaskArray())
							Print #2 , Now() & "        " & "		Element Count = " & TmpTaskArrayCount
						End If
					Else
						ReDim tmpTaskArray(1)
						TmpTaskArrayCount = 0
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "	TmpTaskArray does not Already Exists"
							Print #2 , Now() & "        " & "		Ubound = " & ubound(tmpTaskArray())
							Print #2 , Now() & "        " & "		Element Count = " & TmpTaskArrayCount

						End If
					End If
					tmpTaskArray(tmpTaskArrayCount).lastrunduration = oldTaskArray(oldArrayCount).lastrunduration
					tmpTaskArray(tmpTaskArrayCount).ProgramName = oldTaskArray(oldArrayCount).ProgramName 
					tmpTaskArray(tmpTaskArrayCount).timerunning = oldTaskArray(oldArrayCount).timerunning 
					tmpTaskArray(tmpTaskArrayCount).TaskID = oldTaskArray(oldArrayCount).TaskID 
					tmpTaskArray(tmpTaskArrayCount).TaskName = oldTaskArray(oldArrayCount).TaskName 
					tmpTaskArray(tmpTaskArrayCount).Command = oldTaskArray(oldArrayCount).Command 
					tmpTaskArray(tmpTaskArrayCount).spid = oldTaskArray(oldArrayCount).spid 
					tmpTaskArray(tmpTaskArrayCount).FailCount = oldTaskArray(oldArrayCount).FailCount 
					tmpTaskArray(tmpTaskArrayCount).Eventfired = oldTaskArray(OldArrayCount).Eventfired
					tmpTaskArray(tmpTaskArrayCount).cleared = OldTaskArray(OldArrayCount).cleared
					tmpTaskArray(tmpTaskArrayCount).NewTask	= OldTaskArray(OldArrayCount).NewTask 
					If DO_DEBUG  = "y" Then
						PrintRet = DebugPrintTask(tmpTaskArray," Contents of TmpTaskArray after adding new element")
					End If
				End If
			Next OldArrayCount
		End If

		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "	tmpTaskArray only contains Tasks that are still running and not tasks that have finished"
		End If

		If arraydims(tmpTaskArray) <> 0 Then
			If DO_DEBUG  = "y" Then
				PrintRet = DebugPrintTask(tmpTaskArray," Contents of TmpTaskArray")
			End If
		End If

		'Finished Processing so now copy TmpTaskArray to OldTaskArray
		If arraydims(tmpTaskArray) >0 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "	copying tmptaskarray back to oldtaskarray ready for next iteration"
			End If

			ReDim OldTaskArray(ubound(tmpTaskArray))
			For oldArrayCount = 0 To ubound(oldTaskArray)-1
				oldTaskArray(oldArrayCount).lastrunduration = tmpTaskArray(oldArrayCount).lastrunduration
				oldTaskArray(oldArrayCount).ProgramName = tmpTaskArray(oldArrayCount).ProgramName 
				oldTaskArray(oldArrayCount).timerunning = tmpTaskArray(oldArrayCount).timerunning 
				oldTaskArray(oldArrayCount).TaskID = tmpTaskArray(oldArrayCount).TaskID 
				oldTaskArray(oldArrayCount).TaskName = tmpTaskArray(oldArrayCount).TaskName
				oldTaskArray(oldArrayCount).Command = tmpTaskArray(oldArrayCount).Command  
				oldTaskArray(oldArrayCount).spid = tmpTaskArray(oldArrayCount).spid
				oldTaskArray(oldArrayCount).FailCount = tmpTaskArray(oldArrayCount).FailCount
				oldTaskArray(oldArrayCount).Eventfired = tmpTaskArray(oldArrayCount).Eventfired 
				OldTaskArray(oldArrayCount).cleared = false
				OldTaskArray(oldArrayCount).NewTask = false
			Next oldArrayCount
		Else
			' If there are no elements in the tmpArray then nothing is to be remembered, so clear out OldTaskArray.
			ReDim OldTaskArray()
		End If


		If DO_DEBUG  = "y" Then
			PrintRet = DebugPrintTask(OldTaskArray," OldTaskArray At end of Iteration")
		End If


	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "	Finished Eventing"
	End If

	End If



continue:
If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking TASKS"
	Close #2
End If
GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


