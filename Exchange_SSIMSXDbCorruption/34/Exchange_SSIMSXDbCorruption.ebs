'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### Exchange_SSIMSXDbCorruption

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = Fixed Version Info
'Log:
'%KSVerID=1.3, %Date=12/20/1999, %Time=15:00:43, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Added Command Post ShortmsgText Variable
'%KSVerID=1.2, %Date=12/10/1999, %Time=15:00:03, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Added Debug Info, Added Variables Through Out To make Script Generic
'%KSVerID=1.1, %Date=12/9/1999, %Time=14:59:04, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Added "N" Occurence Logic,Added Comments Through out Script,Removed Parameters from Parameter Dialog, to reduce errors in setting up script.
'%KSVerID=1.0, %Date=12/08/1999, %Time=16:16:21, %User=W2KDEV\adm_user (sa), %TZ=GMT 
'	Use's Event Log to Check for Events Generated
'### End KP-Version Section


'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Raises an alert when MSX DB Corruption messages are logged in the NT Event Log

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 4 10 1 1 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const NT_MachineFolder = ""

'### End Type Section

'### Begin KPP Section
' [V<Set Events in past N hours, which checks for the first interval, to: -1 (all previous hours), 0 (events happening from now on) or xx (previous # of hours). Event IDs are 23,24,39,105,116,118,184,200,201.(Ver 3.4)>V]
' [A<When one or more event log entries are found during the current interval, the selected action is taken.>A]
Const DO_EVENT1 = "y" 		'[M<Send Event Event ? (y/n)>M][T<string,1,' ',yn">T]
Const DO_NUMBERS = "n" 		'[M<Show Numbers ? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" 		'[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const RecentHours = 0 		'[M<Events in past N hours>M][T<integer,1,' ',-1,1e+007,hours>T]
Const GroupFactor = 30 		'[M<Max # of Entries per Event Report>M][T<integer,1,' ',1,100,GroupFactor>T]
Const Severity = 8 			'[M<Event Severity>M][T<integer,1,' ',1,40,SevLevel>T]
Const AKPID = "AKP_NULL" 	'[M<Action Taken>M]
Const NoOccurances = 1 		'[M<No of Occurances that can occur before event fired>M][T<integer,1,' ',-1,1e+007,Time(s)>T]
Const DEBUG = "y"			'[M<Write Debug Info? (y/n)>M] [T<String,1,,"yn">T]

'### End KPP Section

'### Begin KPS Section
'Define constants used throughout procedure
Dim DO_DEBUG As String
Dim Openfilefail As Boolean
Const DO_EVENT = "n" '[M<Event For Individual ID's ? (y/n)>M][T<string,1,' ',yn">T]
Const Category = "" 
Const User = "" 
Const Computer = "" 
Const Description = "" 
Const Log = "Application"		
Const TypeError = "y" 
Const TypeWarning = "y" 
Const TypeInformation = "y" 
Const TypeSuccessAudit = "y"
Const TypeFailureAudit = "y"
Const Source = "EDB,ESE97"	
Const Events = "23,24,39,105,116,118,184,200,201"
'Const Events = "17055,17023,17060,17054,17076,17034"

Const DataHeaderTxt = "MSX DB Corruption Events"		
Dim ShortMsgTxt As String
Dim KSName As String
Dim EventRecNum() As Long
'end of constant declarations
'these are removed from the parameter screen and moved into the procedure to simplify 
'the set up of the script.
Dim NT As Object
Dim OBJ As Object
Const UNITNUMBER = "^^#"
Dim RepType As Long
Private RecNum As Long		' Record Number - persistent across iterations
Private Iter As Long		' Iteration Count - persistent across iterations
Private resname$
Private Occurences As Integer 'Number of times this event has occurred

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Sub Main()
	On Error GoTo main_error
	If Iterationcount() =1 Then	
		Openfilefail = false
		resname = "NT_MachineFolder = " & NT_MachineFolder
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Re-Dimentioning array with " & itemcount(Events,",") & " Elements"
		End If
		ReDim EventRecNum(itemcount(Events,","))
	End If
	Dim longm As String

	debugstopped = false
	Dim eventmsg As String
	Dim Machinenamestr As String
	Machinenamestr=NT_MachineFolder
	ShortMsgTxt = Machinenamestr & " MSX-DB ERROR NULL" 	
	Dim Dnum#, Dtotal#
	Dim AgtMsg$, AgtError$
	Dim finalmsg As String
	Dim bMoreData As Boolean
	Dim Eventidcount As Integer
	'create reference to OLE Object to interogate.
	Set NT = CreateObject("NetiQAgent.NT")
	'Create reference to specific element of OLE Object.
	Set OBJ = NT.System
	DO_DEBUG = DEBUG

	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"Exchange_SSIMSXDbCorruption" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If
	End If


	' Check to see if this is the first time this script is run
	' this is needed to set up Data headers for graph details, this is
	' only performed the first time the script is run.
	If IterationCount() = 1 Then
		RecNum = 0
		Iter = 1
		Occurences=0
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Set Up data Header : " & DataHeaderTxt
		End If

		' If the script is setup to capture data then the data header for the graphs
		' is set up
		If DO_DATA = "y" Then
			DataHeader DataHeaderTxt & UNITNUMBER, 0, 1
		End If

		' See Winnt.h for the bit field definition
		' Define bit field used to store type of event.
		Reptype = 0
		If TypeError = "y" Then
			Reptype = Reptype + 1
		End If
		If TypeWarning = "y" Then
			Reptype = Reptype + 2
		End If
		If TypeInformation = "y" Then
			Reptype = Reptype + 4
		End If
		If TypeSuccessAudit = "y" Then
			Reptype = Reptype + 8
		End If
		If TypeFailureAudit = "y" Then
			Reptype = Reptype + 16
		End If
		' Define the name of the resource that is used in this script.
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Resource Name   :  " & resname
		End If

	End If
		
  	Dtotal = 0
	Flags = 3			' Want both AGTMSG and ERRMSG

' this label allows the procedure to be re-entered if there are more event log entries
' to be read.
	finalmsg = "Events to be checked are " & Events & Chr(10)
	finalmsg = "Break down of Events found in Eventlog are" & Chr(10)
If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " &  "Checking for eventID's " & Events
End If

For Eventidcount = 1 To itemcount(Events,",")
	bMoreData=false
	Dtotal = 0
	ReadNext:
	Event = Item$(Events,Eventidcount,,",")
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " &  "Checking for eventID : " & Event
	End If

	'Inputs are Log, RecentHours, RepType, Source,
	'	Category, Event, User, Computer, Description, GroupFactor, RecNum, Flags (3)
	'Outputs are RecNum, AgtMsg, AgtError
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " &  "Rec-Num for this event is " & EventRecNum(Eventidcount) & ", this is where the reading will start from"
	End If
	Dnum = OBJ.EventLog(Log, RecentHours, RepType, Source, Category, _
		Event, User, Computer, Description, GroupFactor, EventRecNum(Eventidcount), AgtMsg, AgtError, 3)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " &  "Rec-Num for this event is " & EventRecNum(Eventidcount) & ", this is where the reading Finished for this iteration"
	End If

	'If the Return from the value from reading the event log is -1 then there are
	'no entries that match the criteria and an error is raised to exit the script.
	If Dnum = -1 Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Error Occured Terminate Script : " 
			Print #2 , Now() & "        " &  "		" & AgtError
		End If

		Err.Description = AgtError
		Err.raise 4133	  'raise error to terminate this KS#
	Else
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Found " & str(dnum) & " Events in this read"
		End If
	End If

	'if the return value from reading the event log is -2 then there is more events to be read
	'any other value is taken that there are no more events to be read.
	If Dnum = -2 Then
		bMoreData = TRUE
		Dnum = GroupFactor
	Else
		bMoreData = FALSE
	End If

	' this checks whether an event should be raised when the criterai for the script are meet.	
	If DO_EVENT = "y" Then
		
		If Dnum > 0 Then
			'This keeps a running total of how many occurances of an event have occured
			Occurences = Occurences+ Dnum
			' If the number of occurences have exceeded the threshold set for the script an
			' event is fired.
			If (Occurences = NoOccurances) Or (Occurences > NoOccurances) Then
				If DO_NUMBERS = "y" Then
					ShortMsgTxt = Machinenamestr & " MSX-DB-" & trim(Event) & " ERROR " & Occurences
				Else
					ShortMsgTxt = Machinenamestr & " MSX-DB-" & trim(Event) & " ERROR NULL"
				End If
				MSActions Severity,ShortMsgTxt, AKPID, resname, AgtMsg 

				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Short Message : " & ShortMsgTxt
				End If

				' the number of occurences are reset to zero once the event has been raised.
				' This allows the script to start again.
				Occurences=0
			End If
			Iter = Iter + 1
		End If
	End If

	
	Dtotal = Dtotal + Dnum
	' If there are more events to read the procedure is entered again.
	If bMoreData Then
		Flags = 2			' want only ERRMSG, i.e. don't want AGTMSG
		GoTo ReadNext
	End If
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " &  "Checking for Total Events Found : " & Dtotal
	End If

	finalnum = finalnum + Dtotal
	finalmsg = finalmsg & "Total Events for EventID " & Event & " is " & str(Dtotal) & Chr(10)
Next Eventidcount

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " &  "Final Number of events found " & finalnum
	End If

	If DO_EVENT1 = "y" Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Check Rolled Up Eventing"
		End If

		If finalnum > 0 Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " &  "Do Rolled Up Eventing"
			End If
			If DO_NUMBERS = "y" Then
				ShortMsgTxt = Machinenamestr & " MSX-DB ERROR " & finalnum
			Else
				ShortMsgTxt = Machinenamestr & " MSX-DB ERROR NULL"
			End If
			MSActions Severity,ShortMsgTxt, AKPID, resname,finalmsg
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " &  "Finished Rolled Up Eventing"
			End If
		Else
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " &  "No Events so no Rollup"
			End If
		End If
	End If

	' Graphing the total number of entries, but only the first GroupFactor in details
	If DO_DATA = "y" Then
    	DataLog 1, finalnum, finalmsg 	
	End If

If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking Event Log"
	Close #2
End If
GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select

main_exit:

End Sub


'### End KPS Section


