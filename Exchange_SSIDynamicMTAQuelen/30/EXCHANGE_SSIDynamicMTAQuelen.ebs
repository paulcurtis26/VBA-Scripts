'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### Exchange_SSIDynamicMTAQueLen

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.0.361.8.2"
Const KSVerID = "3.0"
'Comment=  Changed to Command Post 3.0 Syntax
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors Queue Length of MTA Connections, including MTAs with other servers, Pub/Priv IS, RAS, site connectors, X.400, IMC, MSMail, directory queue.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959
'### End KPC Section

'### Begin Type Section
Const EXHT_MTAQueueF = ""

'### End Type Section

'### Begin KPP Section

'### Author 		: NetIQ
'### Version		: 1.2
'### Description	: Monitors each MTAQue Length 

'### Changed by		: Dayanand Sankar (713) 245-1556 (Property of Shell Services International)
'### Date			: 8/12/97
'### Revision       : 1.2
'### Enhancements 	: -Change to fix false alerts  

'### Changed by		: Dayanand Sankar (713) 245-1556 (Property of Shell Services International)
'### Date			: 7/16/97
'### Revision       : 1.1
'### Enhancements 	: -Change to fix false alerts  

'### Changed by		: Dayanand Sankar (713) 245-1556 (Property of Shell Services International)
'### Date			: 6/01/97
'### Revision       : 1.1
'### Enhancements 	: -Change to accomodate 'n' consecutive times of occurrences for all 
'###				   que length thersholds.
'###				  -Initial Clear message and Clear message after a threshold has been 
'###				   reached and then falling below that threshold 'n' consecutive times.
'###				  -Also event messages are formatted to represent 
'###				   Counter, Value and Number with only spaces seperating these three entities.
'###
'### Changed by		: Paul Curtis (Property of Shell Services International)
'### Date			: 15/01/97
'### Revision       : 1.2
'### Enhancements 	: -Added SEND_NORMAL Parameter to allow Auto Clear to be switched on or Off
'###				   
'### Changed by		: Paul Curtis (Property of Shell Services International)
'### Date			: 22/01/99
'### Revision       : 1.3
'### Enhancements 	: -Fixed SEND_NORMAL problem as not all Normal messages had the if SEND_NORMAL ...then section
'###				   
'### Changed by		: Paul Curtis (171) 257-7373 (Property of Shell Services International)
'### Date			: 25/1/99
'### Revision       : 1.4
'### Enhancements 	: -Added code to archive old messages and limit amount stored to 1024k in two files
'###		
'### Changed by		: Paul Curtis (171) 257-7373 (Property of Shell Services International)
'### Date			: 18/6/99
'### Revision       : 1.5
'### Enhancements 	: -Added code to always send Auto Clear if Command post is the action
'###		
'### Changed by		: Paul Curtis (171) 257-7373 (Property of Shell Services International)
'### Date			: 18/6/99
'### Revision       : 1.5
'### Enhancements 	: -Made Command Post 3.0 Compliant
'###		


' The type and range of each variable can be enforced as follows
' [T<Integer, maxList, delim, minValue, maxValue, units>T]	maxList and delim are place holders
' [T<String, maxChars, delim, legalChars>T]
' [M<message text>M]
'
' [V<CPReady. Monitors Queue Length of MTA Connections. For EACH connection, check if any exceeds the threshold. For ALL connections, check if the total exceeds the threshold.  Event is raised if exceeds. (Version 3.0)>V]
Const DO_EVENTEach = "y"	'[M<*Event for each connection? (y/n)>M] [T<String,1,,"yn">T]
Const TH_USAGEEach = 100	'[M< Queue Length of each connection > >M] [T<long,,,0,32767, #>T]
Const DO_NUMBERS = "y" '[M<Show numbers? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTAll = "y"		'[M<*Event for all connections? (y/n)>M] [T<String,1,,"yn">T]
Const TH_USAGEAll = 500		'[M< Queue Length of all connections > >M] [T<long,,,0,999999, #>T]
Const CONSEC_TIME = 3 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const ByPerSec = "y"		'[M<Check whether Send Bytes/Sec = 0 for all connections? (y/n)>M] [T<String,1,,"yn">T]
Const DO_DATA = "y"		'[M<Collect Data for all connections? (y/n)>M] [T<String,1,,"yn">T]
Const SEND_NORMAL = "y"		'[M<Send Message when Queue is Normal (AutoClear Message)? (y/n)>M] [T<String,1,,"yn">T]
Const SEVERITY = 5		'[M<Event Severity>M] [T<long,,,1, 40, SevLevel>T]
Const Sev_Normal = 40		'[M<Event Severity - Normal>M] [T<long,,,1, 40, SevLevel>T]
Const DO_DEBUG = "n"		'[M<Write Debug Information to File? (y/n)>M] [T<String,1,,"yn">T]

'[A<When the queue length exceeds the threshold, the selected action is taken.>A]
Const AKPID = "AKP_NULL"	' [M<Action Taken>M]

'### End KPP Section

'### Begin KPS Section

Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long

Type QUES
	QueName As String
	QueLen As Double
	Count As Long
	BytesPerSec As Double
	bDone As Boolean
	ClearCount As Long
	ClearCnt As Long
	ClearDone As Boolean
End Type


Dim Exch As Object
Dim NT As Object
Dim Sys As Object
Dim CurrentQUES() As QUES
Dim NewQUES() As QUES
Dim bTotal As Boolean
Dim total As Double
Dim TotlaTimes As Long
Dim AgtMsg As String
Dim Count As Long
Dim	InitializeDone As Boolean
Dim bTotalClear As Boolean
Dim TotalClearTimes As Long
Dim TotalClearCnt As Long
Dim Machinenamestr As String

Sub CreateQuesArray(ByVal InstList As String, ByVal Result As Long)

   	Dim Count As Long
	Dim NewCount As Long
	Dim I As Long
	Dim J As Long
	Dim Inst As String
	Dim dval As Double
	Dim BytesPSec As Double
	Dim NewNewCount As Long

	
	On Error GoTo HANDEL_ERROR
	
	NewCount = 0	
	NewNewCount = 0
	
	If Result <> 0 And InstList <> "" Then
		For I = 0 To Result - 1
			Inst = Item$(InstList, I + 1,, chr$(10))
			dval =  Exch.MTAQueueLen(Inst)
			total = total + dval
			BytesPSec = Sys.CounterValue("MSExchangeMTA Connections", "Send Bytes/sec", Inst)
			AgtMsg = AgtMsg & dval & chr$(9) & chr$(9) & Inst &  chr$(9) & chr$(9) & BytesPSec & Chr$(10)
			If Not InitializeDone Then
				ReDim CurrentQUES(Result - 1)
				InitializeDone = "True"
				CurrentQUES(I).QueName = Inst
				CurrentQUES(I).QueLen = dval
				CurrentQUES(I).BytesPerSec = BytesPSec
				CurrentQUES(I).bDone = "False"
				CurrentQUES(I).ClearDone = "False"			
			Else
				Count = UBound(CurrentQUES)
				For J = 0 To Count
					If CurrentQUES(J).QueName = Inst Then
						CurrentQUES(J).QueLen = dval
						CurrentQUES(J).BytesPerSec = BytesPSec
						ReDim Preserve NewQUES(NewCount)
						NewQUES(NewCount).QueName = CurrentQUES(J).QueName
						NewQUES(NewCount).QueLen = CurrentQUES(J).QueLen
						NewQUES(NewCount).Count = CurrentQUES(J).Count
						NewQUES(NewCount).BytesPerSec = CurrentQUES(J).BytesPerSec
						NewQUES(NewCount).bDone = CurrentQUES(J).bDone
						NewQUES(NewCount).ClearDone = CurrentQUES(J).ClearDone
						NewQUES(NewCount).ClearCnt = CurrentQUES(J).ClearCnt
						NewQUES(NewCount).ClearCount = CurrentQUES(J).ClearCount
						NewCount = NewCount + 1
					End If
				Next J
				If (Not Exists(Inst)) Then
					NewNewCount = UBound(NewQUES)				
					If Err.Number = 9 Then
						NewNewCount = 0				
					Else
						NewNewCount = NewNewCount + 1
					End If
					NewCount = NewNewCount + 1
					ReDim Preserve NewQUES(NewNewCount)
					NewQUES(NewNewCount).QueName = Inst
					NewQUES(NewNewCount).QueLen = dVal
					NewQUES(NewNewCount).BytesPerSec = BytesPSec
					NewQUES(NewNewCount).bDone = "False"
					NewQUES(NewNewCount).ClearDone = "False"
				End If			   		
			End If
		Next I
	End If

Exit Sub
HANDEL_ERROR:

If Err.Number = 9 Then
	Resume Next
End If

End Sub


Function Exists(ByRef Instance As String) As Variant

	Dim Count As Long
	Dim I As Long

	Count = UBound(CurrentQUES)
	Exists = 0
	For I = 0 To Count
		If CurrentQUES(I).QueName = Instance Then
			Exists = -1
		End If
	Next I

End Function





Sub DisplayEvent()

	Dim Count As Long	
	Dim longmsg As String
	Dim shortmsg As String
	Dim resmsg As String
	Dim I As Long

	Count = UBound(CurrentQUES)
	resmsg = "EXHT_MTAQueueF = " & EXHT_MTAQueueF
	
	For I = 0 To Count
		If DO_EVENTEach = "y" Then
			If ByPerSec = "y" Then
				If CurrentQUES(I).BytesPerSec = 0 And CurrentQUES(I).QueLen > TH_USAGEEach Then
					CurrentQUES(I).Count = CurrentQUES(I).Count + 1
					CurrentQUES(I).ClearDone = -1
					If CurrentQUES(I).ClearCount <> 0 And CurrentQUES(I).ClearCount < CONSEC_TIME Then
						CurrentQUES(I).ClearCount = 0
					End If
					If CurrentQUES(I).ClearCnt <> 0 And CurrentQUES(I).ClearCnt < CONSEC_TIME Then
						CurrentQUES(I).ClearCnt = 0
					End If
					If CurrentQUES(I).Count = CONSEC_TIME Then 
						longmsg =  CurrentQUES(I).QueName & "'s QueueLen = " & CStr(CurrentQUES(I).QueLen) & "; >TH = " & CStr(TH_USAGEEach) & " Send Bytes/Sec = " & Format(CurrentQUES(I).BytesPerSec, "0.0")
						If DO_NUMBERS = "y" Then
							ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " EXCEEDED " & CStr(CurrentQUES(I).QueLen)
						Else
							ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " EXCEEDED NULL"
						End If				
						MSActions SEVERITY, shortmsg, AKPID, resmsg, longmsg
						CurrentQUES(I).bDone = "True"
						CurrentQUES(I).ClearCnt = 0
						CurrentQUES(I).ClearCount = 0
					End If
				End If
			ElseIf CurrentQUES(I).QueLen > TH_USAGEEach Then
				CurrentQUES(I).Count = CurrentQUES(I).Count + 1
				CurrentQUES(I).ClearDone = -1
				If CurrentQUES(I).ClearCount <> 0 And CurrentQUES(I).ClearCount < CONSEC_TIME Then
					CurrentQUES(I).ClearCount = 0
				End If
				If CurrentQUES(I).ClearCnt <> 0 And CurrentQUES(I).ClearCnt < CONSEC_TIME Then
					CurrentQUES(I).ClearCnt = 0
				End If
				If CurrentQUES(I).Count = CONSEC_TIME Then 
					longmsg =  CurrentQUES(I).QueName & "'s QueueLen = " & CStr(CurrentQUES(I).QueLen) & "; >TH = " & CStr(TH_USAGEEach) & " Send Bytes/Sec = 0"
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " EXCEEDED " & CStr(CurrentQUES(I).QueLen)
					Else
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " EXCEEDED NULL"
					End If				
					MSActions SEVERITY, shortmsg, AKPID, resmsg, longmsg
					CurrentQUES(I).bDone = "True"
					CurrentQUES(I).ClearCnt = 0
					CurrentQUES(I).ClearCount = 0
				End If
			ElseIf CurrentQUES(I).QueLen < TH_USAGEEach Or CurrentQUES(I).BytesPerSec <> 0 Then
				CurrentQUES(I).ClearCount = CurrentQUES(I).ClearCount + 1
				CurrentQUES(I).ClearCnt = CurrentQUES(I).ClearCnt + 1
				If CurrentQUES(I).Count <> 0 And CurrentQUES(I).Count < CONSEC_TIME Then
					CurrentQUES(I).Count = 0
				End If
				If CurrentQUES(I).ClearCount = CONSEC_TIME And CurrentQUES(I).bDone <> -1 And CurrentQUES(I).ClearDone <> -1 Then
					longmsg =  CurrentQUES(I).QueName & "'s QueueLen = " & CStr(CurrentQUES(I).QueLen) & "; <TH = " & CStr(TH_USAGEEach)
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " NORMAL " & CStr(CurrentQUES(I).QueLen)
					Else
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " NORMAL NULL"
					End If				

					If SEND_NORMAL = "y" Then
						MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
						End If
					End If

					CurrentQUES(I).bDone = "False"
					CurrentQUES(I).Count = 0
					CurrentQUES(I).ClearCnt = 0
					CurrentQUES(I).ClearDone = "True"
				End If
				If CurrentQUES(I).ClearCnt = CONSEC_TIME And CurrentQUES(I).bDone Then
					longmsg =  CurrentQUES(I).QueName & "'s QueueLen = " & CStr(CurrentQUES(I).QueLen) & "; <TH = " & CStr(TH_USAGEEach)
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " NORMAL " & CStr(CurrentQUES(I).QueLen)
					Else
						ShortMsg = MachineNamestr & " " & AlterString(CurrentQUES(I).QueName, " ", "-") & " NORMAL NULL"
					End If				

					If SEND_NORMAL = "y" Then
						MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
						End If
					End If

					CurrentQUES(I).bDone = "False"
					CurrentQUES(I).Count = 0
					CurrentQUES(I).ClearCnt = 0
					CurrentQUES(I).ClearDone = "True"
				End If					
			End If
		End If
	Next I

End Sub



Sub SwappArrays(ByRef Count As Long)

	Dim QCount As Long
	Dim I As Long
	
	If Count > 1 Then
		QCount = UBound(NewQUES)
		ReDim CurrentQUES(QCount) 
		For I = 0 To QCount
			CurrentQUES(I).QueName = NewQUES(I).QueName
			CurrentQUES(I).QueLen = NewQUES(I).QueLen
			CurrentQUES(I).Count = NewQUES(I).Count
			CurrentQUES(I).BytesPerSec = NewQUES(I).BytesPerSec
			CurrentQUES(I).bDone = NewQUES(I).bDone
			CurrentQUES(I).ClearCnt = NewQUES(I).ClearCnt
			CurrentQUES(I).ClearCount = NewQUES(I).ClearCount
			CurrentQUES(I).ClearDone = NewQUES(I).ClearDone			
		Next I
		ReDim NewQUES(0)
	End If
	
End Sub



Function AlterString(sString As String, sCharToReplace As String, sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function



'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Sub Main()

	Dim result As Double
	Dim resmsg$
	Dim longmsg$
	Dim shortmsg$
	Dim InstList As String
	Dim BytesPerSec As Double
    Dim NameSize As Long
    Dim X As Long
	Dim Machinename1 As String
	Dim y As Integer
    MachineName1 = Space$(16)
    NameSize = Len(MachineName1)
    X = GetComputerName(Machinename1,NameSize)
	For y = 1 To Len(Machinename1)
		If ASC(Mid(Machinename1,y,1)) <> 0 Then
			Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
		End If
	Next y
	Machinenamestr = lcase(trim(Machinenamestr))

	Dim version As String
 	version = ""
	MCVersion "qexcha.dll", version

	If version < "2.0.274.2" Then
		longmsg = "The version of Qexcha.dll is " & version & " ."
		longmsg = longmsg & Chr$(10) & "This KS needs the Qexcha.dll version 2.0.274.2 or higher on SP2"
		resmsg = "EXHT_MTAQueueF" = EXHT_MTAQueueF
		MCAbort resmsg, longmsg
	End If


	Set NT = CreateObject("NetiQAgent.NT")
	Set Exch = CreateObject("NetiQAgent.Exch")

  	Set Sys = NT.System
	total = 0
	KSName= "EXCHANGE_SSIDynamicMTAQueLen"

	result = Sys.InstanceValue("MSExchangeMTA Connections", "Associations", 0, InstList, 1)
	AgtMsg = "QueueLen" & chr$(9) & "Connection" & chr$(9) & "Send Bytes/Sec" & chr$(10)

	If DO_DEBUG  = "y" Then
		createret = createdebugdir	'Use Function to Create Directory if its not already there
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If

		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
	End If
	
	
	
	If result <> 0 And InstList <> "" Then
		If DO_DEBUG  = "y" Then			
			Print #2, now() & "      " & "Queues to Check "
			Print #2, now() & "      " & InstList
		End If
		Count = Count + 1
		
		CreateQuesArray InstList, result
	
		SwappArrays Count

		DisplayEvent

	
		If DO_EVENTAll = "y" Then	'check the total queue length of all connections
		   	resmsg = "EXHT_MTAQueueF = " & EXHT_MTAQueueF
			longmsg = "Sum of all conections queue length is " & _
				Cstr(total) & "; >TH = " & CStr(TH_USAGEAll)

			If total > TH_USAGEAll Then
				If DO_DEBUG  = "y" Then			
					Print #2, now() & "      " & "Queue Length over Threshold "
					Print #2, now() & "      " & "Queue Length : " & total & "  Threshold : " & TH_USAGEAll
				End If

				TotlaTimes = TotlaTimes + 1
				bTotalClear = -1
				If TotalClearCnt <> 0 And TotalClearCnt < CONSEC_TIME Then
					TotalClearCnt = 0
				End If
				If TotalClearTimes <> 0 And TotalClearTimes < CONSEC_TIME Then
					TotalClearTimes = 0
				End If
				If TotlaTimes = CONSEC_TIME Then
					If DO_DEBUG  = "y" Then			
						Print #2, now() & "      " & "Total Times has reached Consec Times "
					End If
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " ALL-QUEUES EXCEEDED " & total
					Else
						ShortMsg = MachineNamestr & " ALL-QUEUES EXCEEDED NULL"
					End If				

					MSActions SEVERITY, ShortMsg , AKPID, resmsg, longmsg		 	'start an action and record event
					bTotal = "True"				
					TotalClearCnt = 0
					TotalClearTimes = 0
				End If
			Else
				If DO_DEBUG  = "y" Then			
					Print #2, now() & "      " & "Total Below Threshold"
				End If

				TotalClearCnt = TotalClearCnt + 1
				TotalClearTimes = TotalClearTimes + 1
				If TotalClearCnt = CONSEC_TIME And bTotal = -1 Then
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " ALL-QUEUES NORMAL " & total
					Else
						ShortMsg = MachineNamestr & " ALL-QUEUES NORMAL NULL"
					End If				

					If SEND_NORMAL = "y" Then
						MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
						End If
					End If

					bTotal = "False"
					TotlaTimes = 0
					bTotalClear = -1
					TotalClearTimes = 0
				End If
				If TotalClearTimes = CONSEC_TIME And bTotalClear <> -1 And bTotal <> -1 Then
					If DO_NUMBERS = "y" Then
						ShortMsg = MachineNamestr & " ALL-QUEUES NORMAL " & total
					Else
						ShortMsg = MachineNamestr & " ALL-QUEUES NORMAL NULL"
					End If				

					If SEND_NORMAL = "y" Then
						MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							MSActions Sev_Normal, ShortMsg, AKPID, ResName, LongMsg
						End If
					End If

					bTotal = "False"
					TotlaTimes = 0
					bTotalClear = -1
					TotalClearTimes = 0
				End If
			End If
		End If

		If DO_DATA = "y" Then
			If IterationCount() = 1 Then
				DataHeader "Total of QueueLen^^#", 0, 1
			End If
			DataLog 1, total, AgtMsg
		End If
	
	End If				
If DO_DEBUG  = "y" Then			
	Close #2
End If
End Sub

'### End KPS Section
