'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSIDBSpacedata

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Collects data on the Total available space in a database.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_DatabaseObj = ""

'### End Type Section

'### Begin KPP Section

' [V<CPReady. Collects data on the total available space (in MB) and the used space(in %) in a DB.(Version 3.4)>V]
' [A<This script is for data collection only so actions have no effect.>A]
Const UPDATE_USAGE = "y" 	'[M<Update Database Usage when retrieving Values? (y/n)>M][T<string,1,' ',yn">T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Const DO_DATA = "y" 		
Const DO_EVENTTH = "n" 
Const DO_EVENTDB = "n" 
Const DO_NUMBERS = "n" 
Const SEND_NORMAL = "y" 
Const TH_FREE = 0.5 	
Const TH_UTIL = 90 		
Const CONSEC_TIME = 1 	
Const Severity = 5 		

Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim DBSpace As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean

Private FreeFailCount() As Integer
Private FreeClearCount() As Integer
Private FreeEventFired() As Boolean

Private UtilFailCount() As Integer
Private UtilClearCount() As Integer
Private UtilEventFired() As Boolean

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

Sub Main()
	On Error GoTo main_error
	If iterationcount() =1 Then
		Openfilefail = false
	End If
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim resname$
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
	Dim updateusage As Boolean
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))
	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG

	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSIDBSpaceData" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If
	End If

	If UPDATE_USAGE = "y" Then
		updateusage=true
	Else
		updateusage=false
	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set DBSpace =  SQL.Space

	passwd = GetSqlPassword("", "sa")

	numdb = ItemCount(SQLT_DatabaseObj, ",")

	ReDim Preserve FreeFailCount(numdb) As Integer
	ReDim Preserve FreeClearCount(numdb) As Integer
	ReDim Preserve FreeEventFired(numdb) As Boolean

	ReDim Preserve UtilFailCount(numdb) As Integer
	ReDim Preserve UtilClearCount(numdb) As Integer
	ReDim Preserve UtilEventFired(numdb) As Boolean

	For I = 1 To numdb
		dbname = Item$(SQLT_DatabaseObj, I,, ",") 
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Checking Database " & dbname & " for data space usage"
		End If
		free = DBSpace.DBSpaceAvailValue("sa", passwd, dbname,updateusage, freeErrorCode, freeErrorMsg)
		util = DBSpace.DBSpaceUtilValue("sa", passwd, dbname,updateusage, utilErrorCode, utilErrorMsg)

		If freeErrorCode = -1 Then
			free = -1
		End If

		If utilErrorCode = -1 Then
			util = -1
		End If
	
		resname = "SQLT_DatabaseObj = " & dbname

		If DO_EVENTDB = "y" Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "eventing on usage"
			End If

			If freeErrorCode = -1 Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Unable to retrieve free MB values for database " & dbname
				End If
				Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " ERROR NULL"
				MSActions Severity, Shortmsg, AKPID, resname, freeErrorMsg
			Else
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "retrieved values for database " & dbname
					Print #2 , Now() & "        " & "free space available in MB is " & Format$(free, "0.00") & "MB"
				End If

				Detailmsg = "Successfully-obtained-DB-space-available " & Format$(free, "0.00") & "MB"
				If DO_NUMBERS = "y" Then
					Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " AVAIL " & Format$(free, "0.00") & "MB"
				Else
					Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " AVAIL NULL"
				End If
				MSActions 39, Shortmsg, AKPID, resname, Detailmsg
			End If

			If utilErrorCode = -1 Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Unable to retrieve % used values for database " & dbname
				End If
				Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " ERROR NULL"
				MSActions Severity, Shortmsg, AKPID, resname, utilErrorMsg
			Else
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "retrieved values for database " & dbname
					Print #2 , Now() & "        " & "used DB space in % is " & Format$(util, "0.00") & "%"
				End If

				Detailmsg = "Successfully-obtained-DB-Space-used " & Format$(util, "0.00") & "%"
				If DO_NUMBERS = "y" Then
					Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " USED " & Format$(util, "0.00") & "%"
				Else
					Shortmsg = Machinenamestr & " " & AlterString(dbname, " ", "-") & " USED NULL"
				End If
				MSActions 39, Shortmsg, AKPID, resname, Detailmsg
			End If
		End If

		If free = -1 Or util = -1 Then
			GoTo continue
		End If

		If DO_EVENTTH = "y" Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "Checking thresholds for database " & dbname
			End If

			If free < TH_FREE   Then
				eventmsg = Format$(free, "0.00") & "MB"
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "free MB for database " & dbname & " is below threshold"
					Print #2 , Now() & "        " & "		free MB returned is " & eventmsg
					Print #2 , Now() & "        " & "		Threshold set is " & str(TH_FREE) & "MB"
					Print #2 , Now() & "        " & "		Incrementing count for condition Failure"
				End If		
    			longm = "The DB (" & dbname & ")'s available space is " & Format$(free, "0.00") & "MB ; <TH = " & CStr(TH_FREE) & "MB " & chr$(10)
				FreeFailCount(I) = FreeFailCount(I) + 1
				FreeClearCount(I) = 0 
				If FreeFailCount(I) = CONSEC_TIME Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "	Number of Consec times set is " & str(CONSEC_TIME)
						Print #2 , Now() & "        " & "	Number of times the Free MB has been below Threshold is " & str(FreeFailCount(I))
						Print #2 , Now() & "        " & "	Firing Event as condition for Free MB has been met required number of times"										
					End If
					FreeEventFired(I) = true
					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " EXCEEDED " & eventmsg
					Else
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " EXCEEDED NULL"
					End If
					MSActions Severity, eventmsg, AKPID, resname, longm
					eventmsg = ""
					FreeFailCount(I) = 0 
				End If
			ElseIf free > TH_FREE Then
				eventmsg = Format$(free, "0.00") & "MB"
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "free MB for database " & dbname & " is above threshold"
					Print #2 , Now() & "        " & "		free MB returned is " & eventmsg
					Print #2 , Now() & "        " & "		Threshold set is " & str(TH_FREE) & "MB"
					Print #2 , Now() & "        " & "		Incrementing count for condition Alright"
				End If
    			longm = "The DB (" & dbname & ")'s available space is " & Format$(free, "0.00") & "MB; >TH = " & CStr(TH_FREE) & "MB " & chr$(10)
				FreeFailCount(I) = 0
				FreeClearCount(I) = FreeClearCount(I) + 1

				If FreeClearCount(I) = CONSEC_TIME And FreeEventFired(I) = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
						Print #2 , Now() & "        " & "		Number of times the Free MB has been above Threshold is " & str(FreeFailCount(I))
						Print #2 , Now() & "        " & "		Condition for Free MB has been met required number of times"										
						Print #2 , Now() & "        " & "			and an event has been sent to report that threshold has been exeeded so run AutoClear section"										
					End If

					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " NORMAL " & eventmsg
					Else
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " NORMAL NULL"
					End If

					If SEND_NORMAL = "y" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
								Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
							End If
							MSActions 40, eventmsg, AKPID, resname, longm
						End If
					End If
					FreeEventFired(I) = false
					FreeClearCount(I) = 0 
				End If
			End If


			If util > TH_UTIL   Then
				eventmsg = Format$(util, "0.00") & "%"
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Used % for database " & dbname & " is above threshold"
					Print #2 , Now() & "        " & "		Used % returned is " & eventmsg
					Print #2 , Now() & "        " & "		Threshold set is " & str(TH_UTIL) & "%"
					Print #2 , Now() & "        " & "		Incrementing count for condition failure"
				End If
    			longm = "The DB (" & dbname & ")'s used space is " & Format$(util, "0.00") & "% ; >TH = " & CStr(TH_UTIL) & "% " & chr$(10)
				utilFailCount(I) = utilFailCount(I) + 1
				utilClearCount(I) = 0 
				If utilFailCount(I) = CONSEC_TIME Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
						Print #2 , Now() & "        " & "		Number of times the Used % has been above Threshold is " & str(UtilFailCount(I))
						Print #2 , Now() & "        " & "		Firing Event as condition for Used % has been met required number of times"										
					End If
					utilEventFired(I) = true
					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " EXCEEDED " & eventmsg
					Else
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " EXCEEDED NULL"
					End If
					MSActions Severity, eventmsg, AKPID, resname, longm
					eventmsg = ""
					utilFailCount(I) =0 
				End If
			ElseIf util < TH_UTIL Then
				eventmsg = Format$(util, "0.00") & "%"
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        "
					Print #2 , Now() & "        " & "Used % for database " & dbname & " is below threshold"
					Print #2 , Now() & "        " & "		Used % returned is " & eventmsg
					Print #2 , Now() & "        " & "		Threshold set is " & str(TH_UTIL) & "%"
					Print #2 , Now() & "        " & "		Incrementing count for condition Alright"
				End If
    			longm = "The DB (" & dbname & ")'s used space is " & Format$(util, "0.00") & "% ; <TH = " & CStr(TH_UTIL) & "% " & chr$(10)
				utilFailCount(I) = 0
				utilClearCount(I) = utilClearCount(I) + 1

				If utilClearCount(I) = CONSEC_TIME And utilEventFired(I) = true Then
					If DO_DEBUG  = "y" Then
						Print #2 , Now() & "        " & "		Number of Consec times set is " & str(CONSEC_TIME)
						Print #2 , Now() & "        " & "		Number of times the Used % has been below Threshold is " & str(UtilFailCount(I))
						Print #2 , Now() & "        " & "		Condition for Used % has been met required number of times"										
						Print #2 , Now() & "        " & "			and an event has been sent to report that threshold has been exeeded so run AutoClear section"										
					End If

					If DO_NUMBERS = "y" Then
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " NORMAL " & eventmsg
					Else
						eventmsg = Machinenamestr & " " &  AlterString(dbname, " ", "-") & " NORMAL NULL"
					End If

					If SEND_NORMAL = "y" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
								Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
							End If
							MSActions 40, eventmsg, AKPID, resname, longm
						End If
					End If
					utilEventFired(I) = false
					utilClearCount(I) = 0 
				End If
			End If
		End If

continue:

		If DO_DATA = "y" Then
			If IterationCount() = 1 Then
				DataHeader "Available DB (" & dbname & ") space^^MB", 0, I
				DataHeader "DB (" & dbname & ") space util^^%", 0, I+1000
 			End If
			datastring = "Avail MB= " & Format$(free, "0.00") & chr$(10) & "Used %= " & Format$(util, "0.00") & chr$(10)
			DataLog I, free, datastring
			DataLog I+1000, util,datastring
		End If

		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Finished Checking Database " & dbname
		End If

	Next I

If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking Databases"
	Close #2
End If
GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select

main_exit:

End Sub

'### End KPS Section


