'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSIDisabledTasks

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the tasks on a server. If one or more of the databases is disabled the an event is raised.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server  = ""
'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the tasks on a server. If one or more of the databases is disabled the an event is raised. (Version 3.4)>V]
' [A<When one or more tasks is disabled, the selected action is taken.>A]
Const DO_EVENTNEW = "y" 	'[M<Event For New tasks Found? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTDEL = "y" 	'[M<Event For Task being deleted? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTSTAT = "y" 	'[M<Event For tasks set to Disabled? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTCODE = "y" 	'[M<Event For task Code changing? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" 		'[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const SEND_NORMAL = "y" 	'[M<Send Event when Tasks are Normal? (y/n)>M][T<string,1,' ',yn">T]
Const SeverityStat = 5 		'[M<Event Severity - Task Disabled>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityCode = 5 		'[M<Event Severity - Task Code Changed>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityNew = 5 		'[M<Event Severity - New Task>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityDel = 5 		'[M<Event Severity - Task Deleted>M][T<integer,1,' ',1,40,SevLevel>T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim Server As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean

Type TaskStatus
	TaskName As String
	TaskCmd As String
	TaskStatus As Long
	EventFired As Boolean
	NewTask As Boolean
	DeletedTask As Boolean
End Type

Private TaskArray() As TaskStatus

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

Sub Main()
	'On Error GoTo main_error
	Dim resname$
	resname = "SQLT_Server = " & SQLT_Server
	Dim TmpTaskArray() As TaskStatus
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
 	Dim AgtMsg As String
	Dim strErrorMsg As String
	Dim ErrorCode As Long
  	Dim CurConn As Long
	Dim CurrentCount As Long
	Dim MaxConn As Integer
	Dim AvailLock As Integer
	Dim FileErrNum As Integer
	Dim sqlcmd As String
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))

	 	If DO_DATA = "y" Then
 			DataHeader "Tasks Status ^^#", 0, 1
		End If

	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSIDisabledTasks" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false  
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If

	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Lock	
	passwd = GetSqlPassword("", "sa")

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting Current Tasks"
	End If

	sqlcmd = "Select Name+ CHAR(44),command+ CHAR(44),enabled from msdb..systasks"
	'Check how this should be represented should it be select count(*) from sysproccesses gives same count as sp_who
	CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Number of tasks 			= " &  CurrentCount
	End If
	If ErrorCode < 0 Then
		eventmsg = "TASK-STATUS ERROR NULL"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	If DO_DEBUG  = "y" Then														  
		Print #2 , Now() & "        " & "Checking New/Old Arrays for list of Tasks"
	End If


	If CurrentCount > 0 Then
		Dim NewTaskArray(CurrentCount) As TaskStatus
	Else
		eventmsg = "TASK-STATUS ERROR NULL"
		strErrorMsg = "No Tasks listed, error has occured"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	For TaskCount = 0 To (linecount(AgtMsg) -2)
			If TaskCount > 1 Then
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " &	"TaskCount = " & TaskCount
					Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,TaskCount+1), 1 ,, ","))
					Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,TaskCount+1), 2 ,, ","))
					Print #2 , Now() & "        " & cdbl(Item$(line$(AgtMsg,TaskCount+1), 3 ,, ","))
				End If
				NewTaskArray(TaskCount - 2).TaskName = trim(Item$(line$(AgtMsg,TaskCount+1), 1 ,, ","))
				NewTaskArray(TaskCount - 2).TaskCmd = trim(Item$(line$(AgtMsg,TaskCount+1), 2 ,, ","))
				NewTaskArray(TaskCount - 2).TaskStatus = cdbl(Item$(line$(AgtMsg,TaskCount+1), 3 ,, ","))
				NewTaskArray(TaskCount - 2).Eventfired = false
				NewTaskArray(TaskCount - 2).NewTask = true
				NewTaskArray(TaskCount - 2).DeletedTask = true
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " & " Filled Array Element " & (TaskCount - 2)
				End If
			End If
	Next TaskCount
If iterationcount() = 1 Then
	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "First Iteration, so new Task contains the actual Task's"
	End If

	ReDim Taskarray(ubound(NewTaskArray)-1)
	For TaskCounty = 0 To ubound(NewTaskArray)-1
		Taskarray(TaskCounty) = NewTaskArray(TaskCounty)
	Next TaskCounty
Else

'Update all old DB's to be deleted, only the ones that are matched will be reset to not be deleted
	For TaskCounty = 0 To ubound(TaskArray)
		TaskArray(TaskCounty).DeletedTask = true
	Next TaskCounty

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Check each Task in NewTask Array, to see if it already exists"
	End If

'Check if each database exists in the old database array or has been deleted
	For TaskCount = 0 To ubound(NewTaskArray)
		If DO_DEBUG  = "y" Then				
			Print #2 , Now() & "        " & "	Checking Task " & NewTaskArray(TaskCount).TaskName
		End If

		'Cycle through each DB in the NewDB List and compare it to the oldDB List
			For TaskCounty = 0 To ubound(TaskArray)
				If NewTaskArray(TaskCount).TaskName = TaskArray(TaskCounty).TaskName Then
					If DO_DEBUG  = "y" Then				
						Print #2 , Now() & "        " & "	Task Exists in old Task Array"
					End If
					NewTaskArray(TaskCount).NewTask = false
					TaskArray(TaskCounty).DeletedTask = false
					If DO_EVENTCODE = "y" Then
						If NewTaskArray(TaskCount).TaskCmd <> TaskArray(TaskCounty).TaskCmd Then						
							eventmsg = Machinenamestr & " " &  "TASK-" & alterstring(NewTaskArray(TaskCount).TaskName," ","-") & " STATUS NULL"
							longm = "The Command for Task " &  Chr(34) & NewTaskArray(TaskCount).TaskName &  Chr(34) & " Has changed" & chr$(10) 
							longm = longm & "Since last check."& chr$(10) 
							longm = longm & "The Command for this Task Is " &  chr$(10) 
							longm = longm & NewTaskArray(TaskCount).TaskCmd & chr$(10) 
							longm = longm & "The Previous Command was " & chr$(10) 
							longm = longm & TaskArray(TaskCounty).TaskCmd & chr$(10) 
							MSActions SeverityCode,eventmsg , AKPID, resname, longm
						End If
					End If

					If DO_EVENTSTAT= "y" Then
						'Task set to disabled
						If NewTaskArray(TaskCount).TaskStatus = 0 Then
							eventmsg = Machinenamestr & " " &  "TASK-" & alterstring(NewTaskArray(TaskCount).TaskName," ","-") & " DISABLED NULL"
							longm = "The Status for Task " & Chr(34) &  NewTaskArray(TaskCount).TaskName &  Chr(34) & chr$(10) 
							longm = longm & "Has been set to Disabled" &  chr$(10) 
							MSActions SeverityStat,eventmsg , AKPID, resname, longm
							TaskArray(TaskCounty).EventFired = true
						ElseIf NewTaskArray(TaskCount).TaskStatus = 1 And TaskArray(TaskCounty).EventFired = true Then
							eventmsg = Machinenamestr & " " &  "TASK-" & alterstring(NewTaskArray(TaskCount).TaskName," ","-") & " NORMAL NULL"
							longm = "The Status for Task "  & Chr(34) & NewTaskArray(TaskCount).TaskName &  Chr(34) & " Has changed" & chr$(10) 
							longm = longm & "Since last check."& chr$(10) 
							longm = longm & "The Status for this Task Is now Enabled" &  chr$(10) 
							TaskArray(TaskCounty).EventFired = false
							If SEND_NORMAL = "y" Then
								If DO_DEBUG  = "y" Then
									Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
								End If
								MSActions 40, eventmsg, AKPID, resname, longm
							Else
								If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
									If DO_DEBUG  = "y" Then
										Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
										Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
									End If
									MSActions 40, eventmsg, AKPID, resname, longm
								End If
							End If
			  			End If
					End If
					TaskArray(TaskCounty).TaskStatus= NewTaskArray(TaskCount).TaskStatus
					TaskArray(TaskCounty).TaskCmd= NewTaskArray(TaskCount).TaskCmd
				End If
			Next TaskCounty
	Next TaskCount

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Add new Task's to Old Task Array"
	End If


	For TaskCount = 0 To ubound(NewTaskArray)
		If 	NewTaskArray(TaskCount).NewTask = true Then
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	Task " & NewTaskArray(TaskCount).TaskName & " Marked as New Task"
			End If
			ReDim Preserve TaskArray(ubound(TaskArray)+1)
			If DO_EVENTNEW = "y" Then
				eventmsg = Machinenamestr & " " &  "Task-" & alterstring(NewTaskArray(TaskCount).TaskName," ","-") & " NEW NULL"
				longm = "Task " &  Chr(34) & NewTaskArray(TaskCount).TaskName &  Chr(34) & " Has been added to the SQL Server" & chr$(10) 
				longm = longm & "The Command of this Task is "  & chr$(10) 
				longm = longm & NewTaskArray(TaskCount).TaskCmd	& chr$(10) 
				longm = longm & "The Status for this Task is " 
				If NewTaskArray(TaskCount).TaskStatus = 1 Then
					longm = longm & "Enabled"
				Else
					longm = longm & "Disabled"
				End If
				MSActions SeverityNew,eventmsg , AKPID, resname, longm
			End If
			TaskArray(ubound(TaskArray)).TaskName = NewTaskArray(TaskCount).TaskName
			TaskArray(ubound(TaskArray)).TaskCmd = NewTaskArray(TaskCount).TaskCmd
			TaskArray(ubound(TaskArray)).TaskStatus = NewTaskArray(TaskCount).TaskStatus
			TaskArray(ubound(TaskArray)).Eventfired = false
			TaskArray(ubound(TaskArray)).NewTask = false
			TaskArray(ubound(TaskArray)).DeletedTask = false
		End If
	Next TaskCount

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Copying old Task Contents to Temp Array, Deleted Task's will not be copied"
	End If

	

	For TaskCounty = 0 To ubound(TaskArray)
		If TaskArray(TaskCounty).DeletedTask = false Then
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	Task " & TaskArray(TaskCounty).TaskName & " Copied Over"
			End If
			If arraydims(TmpTaskArray) = 0 Then
				ReDim TmpTaskArray(0)
			Else
				ReDim Preserve TmpTaskArray(ubound(TmpTaskArray)+1)
			End If
			TmpTaskArray(ubound(TmpTaskArray)).TaskName = TaskArray(TaskCounty).TaskName
			TmpTaskArray(ubound(TmpTaskArray)).TaskCmd = TaskArray(TaskCounty).TaskCmd
			TmpTaskArray(ubound(TmpTaskArray)).TaskStatus = TaskArray(TaskCounty).TaskStatus
			TmpTaskArray(ubound(TmpTaskArray)).Eventfired = TaskArray(TaskCounty).Eventfired
			TmpTaskArray(ubound(TmpTaskArray)).NewTask = false
			TmpTaskArray(ubound(TmpTaskArray)).DeletedTask = false
		Else
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	Task " & TaskArray(TaskCounty).TaskName & " Marked as Deleted, not copied"
			End If
			If DO_EVENTDEL = "y" Then
				eventmsg = Machinenamestr & " " &  "TAKS-" & alterstring(TaskArray(TaskCounty).TaskName," ","-") & " DELETED NULL"
				longm = "Task " &  Chr(34) & TaskArray(TaskCounty).TaskName &  Chr(34) & " Has been Removed from the SQL Server" & chr$(10) 
				MSActions SeverityDel,eventmsg , AKPID, resname, longm
			End If

		End If		
	Next TaskCounty

	'Copy tmp db (with deleted DB's missing) back to DBArray
	ReDim Taskarray(ubound(TmpTaskArray))
	For TaskCounty = 0 To ubound(TmpTaskArray)
		Taskarray(TaskCounty) = TmpTaskArray(TaskCounty)
	Next TaskCounty
	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & " Final List of Tasks to check Status" 
		Print #2 , Now() & "        " & " 			Task Information" 
	End If
End If

	For TaskCounty = 0 To ubound(TaskArray)

		If DO_DEBUG  = "y" Then				
			Print #2 , Now() & "        " & TaskArray(TaskCounty).TaskName
			Print #2 , Now() & "        " & TaskArray(TaskCounty).TaskCmd
			Print #2 , Now() & "        " & TaskArray(TaskCounty).TaskStatus
			Print #2 , Now() & "        " & TaskArray(TaskCounty).Eventfired
		End If
		If DO_DATA = "y" Then
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "		Write Data Value for Task " & trim(TaskArray(TaskCounty).TaskName) 
			End If
			datastring = "Task : " &  Chr(34) & trim(TaskArray(TaskCounty).TaskName) &  Chr(34) & chr$(10) 
			datastring = datastring & "Status : " 
			sleep(1000)
			If TaskArray(TaskCounty).TaskStatus = 1 Then
				datastring = datastring & "Enabled"
			Else
				datastring = datastring & "Disabled"
			End If
			DataLog 1, TaskArray(TaskCounty).TaskStatus, datastring
		End If

	Next TaskCounty




If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking Tasks's"
	Close #2
End If

Exit Sub

GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


