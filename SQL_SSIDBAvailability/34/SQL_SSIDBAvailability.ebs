'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### SQL_SSIDBAvailability

'$Revision: 2 $

'### Begin KP-Version Section
Const AppManID = "3.4.415.1.1"
Const KSVerID = "3.4"
'Comment = This version is released with Version 3.4 of AppManager (Author Paul Curtis)
'Log:
'%KSVerID=1.0, %Date=12/21/1999, %Time=15:02:08, %User= W2KDEV\adm_user  (sa), %TZ=GMT 
'	Addition of SSI Specific Functions (Author Paul Curtis)
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 1
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Monitors the availability of the databases on a server. If one or more of the databases is unavailable the selected action is taken.

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 8 1 0 0 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const SQLT_Server  = ""
'### End Type Section

'### Begin KPP Section

' [V<CPReady. Monitors the availability of the databases on a server. If one or more of the databases is unavailable the an event is raised. (Version 3.4)>V]
' [A<When one or more databases is unavailable, the selected action is taken.>A]
Const DO_EVENT = "y" 		'[M<Event For Database Availability? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTNEW = "y" 	'[M<Event For New Database Found? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTDEL = "y" 	'[M<Event For Database Being Dropped? (y/n)>M][T<string,1,' ',yn">T]
Const DO_EVENTSTAT = "y" 	'[M<Event For Database Changing Status? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" 		'[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const SEND_NORMAL = "y" 	'[M<Send Event when DB availability is Normal? (y/n)>M][T<string,1,' ',yn">T]
Const CONSEC_TIME = 1 		'[M<Consecutive times>M] [T<long,,,1, 999999, #>T]
Const Severity = 5 			'[M<Event Severity>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityNew = 5 		'[M<Event Severity - New DB>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityDel = 5 		'[M<Event Severity - DB Dropped>M][T<integer,1,' ',1,40,SevLevel>T]
Const SeverityStat = 5 		'[M<Event Severity - DB Status Changed>M][T<integer,1,' ',1,40,SevLevel>T]
Const DEBUG  = "n"   		'[M<Write Debug File? (y/n)>M] [T<String,1, ,"yn">T]
Const AKPID = "AKP_NULL" 	'[M<Action taken>M]

'### End KPP Section

'### Begin KPS Section
Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal sBuffer As String, lSize As Long) As Long
Dim SQL As Object
Dim Server As Object
Dim DO_DEBUG As String
Dim Openfilefail As Boolean

Type DBStatus
	DBName As String
	DBStatus As Long
	FailCount	As Integer
	ClearCount As Integer
	EventFired As Boolean
	NewDB As Boolean
	DeletedDB As Boolean
End Type

Private DBArray() As DBStatus

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function

Function GetDBStatus (ByVal StatusCode As Integer) As String
Dim StatusStr As String

	If (StatusCode And 2) = 2 Then
			 StatusStr = StatusStr &  "	The Database is in transition" & chr$(10)
	End If
	If (StatusCode And 4) = 4 Then
			 StatusStr = StatusStr &  "	The Select Into/BulkCopy is Set" & chr$(10)
	End If
	If (StatusCode And 8) = 8 Then
			 StatusStr = StatusStr &  "	The trunc. log on chkpt is Set" & chr$(10)
	End If
	If (StatusCode And 16) = 16 Then
			 StatusStr = StatusStr &  "	The no chkpt on recovery is Set" & chr$(10)
	End If
	If (StatusCode And 32) = 32 Then
			 StatusStr = StatusStr &  "	The Load Crashed While DB was being loaded" & chr$(10)
	End If
	If (StatusCode And 64) = 64 Then
			 StatusStr = StatusStr &  "	The Database has not recovered yet" & chr$(10)
	End If
	If (StatusCode And 128) = 128 Then
			 StatusStr = StatusStr &  "	The Database is in recovery" & chr$(10)
	End If
	If (StatusCode And 256) = 256 Then
			 StatusStr = StatusStr &  "	The Database is Suspect and cannot be opened" & chr$(10)
	End If
	If (StatusCode And 512) = 512 Then
			 StatusStr = StatusStr &  "	The Database is Offline" & chr$(10)
	End If
	If (StatusCode And 1024) = 1024 Then
			 StatusStr = StatusStr &  "	The Database is set to read only" & chr$(10)
	End If
	If (StatusCode And 2048) = 2048 Then
			 StatusStr = StatusStr &  "	The Database is set to DBO use only" & chr$(10)
	End If
	If (StatusCode And 4096) = 4096 Then
			 StatusStr = StatusStr &  "	The Database is set to Single User" & chr$(10)
	End If
	If (StatusCode And 8192) = 8192 Then
			 StatusStr = StatusStr &  "	The Database is being Checkpointed" & chr$(10)
	End If
	If (StatusCode And 16384) = 16384 Then
			 StatusStr = StatusStr &  "	The Database is set to ANSI null Default" & chr$(10)
	End If
	If (StatusCode And 32768) = 32768 Then
			 StatusStr = StatusStr &  "	The Database is set to Emergency Mode" & chr$(10)
	End If



GetDBStatus = StatusStr

End Function

Function AlterString(ByRef sString As String, ByRef sCharToReplace As String, ByRef sCharToReplaceWith As String) As String

    Dim nLen As Long
    Dim sTemp As String
    Dim sTemp1 As String
    Dim I As Long
    
    nLen = Len(sString)
    
    For I = 1 To nLen
        sTemp = Mid(sString, I, 1)
        If sTemp = sCharToReplace Then
            sTemp = sCharToReplaceWith
        End If
        sTemp1 = sTemp1 + sTemp
    Next I
    AlterString = sTemp1
    
End Function

Dim Machinenamestr As String

Sub Main()
	On Error GoTo main_error
	Dim resname$
	resname = "SQLT_Server = " & SQLT_Server
	Dim TmpDBArray() As DBStatus
 	Dim longm As String
	Dim DetailMsg As String
   	Dim dbname$
   	Dim legend$
	Dim eventmsg As String
	Dim I As Long
	Dim numdb As Long
	Dim passwd$
	Dim free As Double
	Dim util As Double
	Dim freeErrorCode As Long
	Dim freeErrorMsg As String
	Dim utilErrorCode As Long
	Dim utilErrorMsg As String
	Dim Shortmsg As String
	Dim datastring As String
 	Dim AgtMsg As String
	Dim strErrorMsg As String
	Dim ErrorCode As Long
  	Dim CurConn As Long
	Dim CurrentCount As Long
	Dim MaxConn As Integer
	Dim AvailLock As Integer
	Dim FileErrNum As Integer
	Dim sqlcmd As String
	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Server
	If iterationcount() =1 Then
    	Dim NameSize As Long
	    Dim X As Long
		Dim Machinename1 As String
		Dim y As Integer
    	MachineName1 = Space$(16)
	    NameSize = Len(MachineName1)
    	X = GetComputerName(Machinename1,NameSize)
		For y = 1 To Len(Machinename1)
			If ASC(Mid(Machinename1,y,1)) <> 0 Then
				Machinenamestr = Machinenamestr + Mid(Machinename1,y,1)
			End If
		Next y
		Machinenamestr = lcase(trim(Machinenamestr))

	 	If DO_DATA = "y" Then
 			DataHeader "DB Availability ^^#", 0, 1
		End If

	End If

	'This gives the ability to change whether Debugging should occur or not, As it is not possible to change the state of 
	'DEBUG as it is defined as a constant.
	DO_DEBUG = DEBUG
	If iterationcount() = 1 Then
		Openfilefail = false
	End If
	If DO_DEBUG  = "y" Then
		If iterationcount() =1 Then
			createret = createdebugdir	'Use Function to Create Directory if its not already there
		End If
		KSName=	"SQL_SSIDBAvailability" & str(getjobid())
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If
		'Open Debug File
		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
		If Openfilefail = true And DO_DEBUG = DEBUG Then 
			eventmsg = Machinenamestr & " " &  "DEBUG NORMAL NULL"
			longm = "Openned debug file " &  chr$(10) 
			longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
			MSActions 40,eventmsg , AKPID, resname, longm
			Openfilefail = false  
			Print #2 , Now() & "        " & "*********Restart Debugging*********"
		End If

	End If

	Set SQL = CreateObject("NetiQAgent.SQL")
	Set Server = SQL.Lock	
	passwd = GetSqlPassword("", "sa")

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Getting Current Databases"
	End If
	sqlcmd = "select name+ CHAR(44),status from master..sysdatabases"
	'Check how this should be represented should it be select count(*) from sysproccesses gives same count as sp_who
	CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Number of Databases 			= " &  CurrentCount
	End If
	If ErrorCode < 0 Then
		eventmsg = "DB-AVAIL ERROR NULL"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Checking New/Old Arrays for list of databases"
	End If


	If CurrentCount > 0 Then
		Dim NewDBArray(CurrentCount) As DBStatus
	Else
		eventmsg = "DB-AVAIL ERROR NULL"
		strErrorMsg = "No DB's listed, error has occured"
		MSActions Severity, eventmsg, AKPID, resname, strErrorMsg
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & eventmsg
			Print #2 , Now() & "        " & strErrorMsg
			Close #2
		End If
		mcabort resname,strErrorMsg
	End If

	For DBCount = 0 To (linecount(AgtMsg) -2)
			If DBCount > 1 Then
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " &	"DBCount = " & DBCount
					Print #2 , Now() & "        " &	trim(Item$(line$(AgtMsg,DBCount+1), 1 ,, ","))
					Print #2 , Now() & "        " & cdbl(Item$(line$(AgtMsg,DBCount+1), 2 ,, ","))
				End If
				NewDBArray(DBCount - 2).DBName = trim(Item$(line$(AgtMsg,DBCount+1), 1 ,, ","))
				NewDBArray(DBCount - 2).DBStatus = cdbl(Item$(line$(AgtMsg,DBCount+1), 2 ,, ","))
				NewDBArray(DBCount - 2).FailCount = 0
				NewDBArray(DBCount - 2).ClearCount = 0
				NewDBArray(DBCount - 2).Eventfired = false
				NewDBArray(DBCount - 2).NewDB = true
				NewDBArray(DBCount - 2).DeletedDB = true
				If DO_DEBUG  = "y" Then				
					Print #2 , Now() & "        " & " Filled Array Element " & (DBCount - 2)
				End If
			End If
	Next DBCount
If iterationcount() = 1 Then
	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "First Iteration, so new DB contains the actual DB's"
	End If

	ReDim DBarray(ubound(NewDBArray)-1)
	For DBCounty = 0 To ubound(NewDBArray)-1
		DBarray(DBCounty) = NewDBArray(DBCounty)
	Next DBCounty
Else

'Update all old DB's to be deleted, only the ones that are matched will be reset to not be deleted
	For DBCounty = 0 To ubound(DBArray)
		DBArray(DBCounty).DeletedDB = true
	Next DBCounty

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Check each DB in NewDB Array, to see if it already exists"
	End If

'Check if each database exists in the old database array or has been deleted
	For DBCount = 0 To ubound(NewDBArray)
		If DO_DEBUG  = "y" Then				
			Print #2 , Now() & "        " & "	Checking DB " & NewDBArray(DBCount).DBName
		End If

		'Cycle through each DB in the NewDB List and compare it to the oldDB List
			For DBCounty = 0 To ubound(DBArray)
				If NewDBArray(DBCount).DBName = DBArray(DBCounty).DBName Then
					If DO_DEBUG  = "y" Then				
						Print #2 , Now() & "        " & "	DB Exists in old DB Array"
					End If
					NewDBArray(DBCount).NewDB = false
					DBArray(DBCounty).DeletedDB = false
					If DO_EVENTSTAT = "y" Then
						If NewDBArray(DBCount).DBStatus <> DBArray(DBCounty).DBStatus Then						
							eventmsg = Machinenamestr & " " &  "DB-" & alterstring(NewDBArray(DBCount).DBName," ","-") & " STATUS NULL"
							longm = "The Status of Database " & NewDBArray(DBCount).DBName & " Has changed" & chr$(10) 
							longm = longm & "Since last check."& chr$(10) 
							longm = longm & "The Status of this Database Is " & NewDBArray(DBCount).DBStatus & chr$(10) 
							longm = longm & "Which gives the following messages " & chr$(10) 
							longm = longm & GetDBStatus(NewDBArray(DBCount).DBStatus) & chr$(10) 
							longm = longm & "The Previous Status was " & DBArray(DBCounty).DBStatus & chr$(10) 
							longm = longm & "Which gives the following messages " & chr$(10) 
							longm = longm & GetDBStatus(DBArray(DBCounty).DBStatus) & chr$(10) 
							MSActions SeverityStat,eventmsg , AKPID, resname, longm
						End If
					End If
					DBArray(DBCounty).DBStatus= NewDBArray(DBCount).DBStatus
				End If
			Next DBCounty
	Next DBCount

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Add new DB's to Old DB Array"
	End If


	For DBCount = 0 To ubound(NewDBArray)
		If 	NewDBArray(DBCount).NewDB = true Then
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	DB " & NewDBArray(DBCount).DBName & " Marked as New DB"
			End If
			ReDim Preserve DBArray(ubound(DBArray)+1)
			If DO_EVENTNEW = "y" Then
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(NewDBArray(DBCount).DBName," ","-") & " NEW NULL"
				longm = "Database " & NewDBArray(DBCount).DBName & " Has been added to the SQL Server" & chr$(10) 
				longm = longm & "The Status of this Database is " & NewDBArray(DBCount).DBStatus & chr$(10) 
				longm = longm & "Which gives the following messages " & chr$(10) 
				longm = longm & GetDBStatus(NewDBArray(DBCount).DBStatus) & chr$(10) 
				MSActions SeverityNew,eventmsg , AKPID, resname, longm
			End If
			DBArray(ubound(DBArray)).DBName = NewDBArray(DBCount).DBName
			DBArray(ubound(DBArray)).DBStatus = NewDBArray(DBCount).DBStatus
			DBArray(ubound(DBArray)).FailCount = 0
			DBArray(ubound(DBArray)).ClearCount = 0
			DBArray(ubound(DBArray)).Eventfired = false
			DBArray(ubound(DBArray)).NewDB = false
			DBArray(ubound(DBArray)).DeletedDB = false
		End If
	Next DBCount

	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & "Copying old DB Contents to Temp Array, Deleted DB's will not be copied"
	End If

	

	For DBCounty = 0 To ubound(DBArray)
		If DBArray(DBCounty).DeletedDB = false Then
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	DB " & DBArray(DBCounty).DBName & " Copied Over"
			End If
			If arraydims(TmpDBArray) = 0 Then
				ReDim TmpDBArray(0)
			Else
				ReDim Preserve TmpDBArray(ubound(TmpDBArray)+1)
			End If
			TmpDBArray(ubound(TmpDBArray)).DBName = DBArray(DBCounty).DBName
			TmpDBArray(ubound(TmpDBArray)).DBStatus = DBArray(DBCounty).DBStatus
			TmpDBArray(ubound(TmpDBArray)).FailCount = DBArray(DBCounty).FailCount
			TmpDBArray(ubound(TmpDBArray)).ClearCount = DBArray(DBCounty).ClearCount
			TmpDBArray(ubound(TmpDBArray)).Eventfired = DBArray(DBCounty).Eventfired
			TmpDBArray(ubound(TmpDBArray)).NewDB = false
			TmpDBArray(ubound(TmpDBArray)).DeletedDB = false
		Else
			If DO_DEBUG  = "y" Then				
				Print #2 , Now() & "        " & "	DB " & DBArray(DBCounty).DBName & " Marked as Deleted, not copied"
			End If
			If DO_EVENTDEL = "y" Then
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(DBCounty).DBName," ","-") & " DELETED NULL"
				longm = "Database " & DBArray(DBCounty).DBName & " Has been Removed from the SQL Server" & chr$(10) 
				MSActions SeverityDel,eventmsg , AKPID, resname, longm
			End If

		End If		
	Next DBCounty

	'Copy tmp db (with deleted DB's missing) back to DBArray
	ReDim DBarray(ubound(TmpDBArray))
	For DBCounty = 0 To ubound(TmpDBArray)
		DBarray(DBCounty) = TmpDBArray(DBCounty)
	Next DBCounty
	If DO_DEBUG  = "y" Then				
		Print #2 , Now() & "        " & " Final List of databases to check availability" 
		Print #2 , Now() & "        " & " 			DB Information" 
	End If
End If

	If DO_DEBUG  = "y" Then				
		For DBCounty = 0 To ubound(DBArray)
			Print #2 , Now() & "        " & DBArray(DBCounty).DBName
			Print #2 , Now() & "        " & DBArray(DBCounty).DBStatus
			Print #2 , Now() & "        " & DBArray(DBCounty).FailCount
			Print #2 , Now() & "        " & DBArray(DBCounty).ClearCount
			Print #2 , Now() & "        " & DBArray(DBCounty).Eventfired
		Next DBCounty
	End If

'Check Availability.


	For DBCounty = 0 To ubound(DBArray)

		sqlcmd = "select count(*) from " & trim(DBArray(DBCounty).DBName) & "..sysobjects"
		'Check how this should be represented should it be select count(*) from sysproccesses gives same count as sp_who
		CurrentCount = SQL.RunSqlValue("sa", passwd, True, sqlcmd, 0, "y", 0, "", AgtMsg, ErrorCode, strErrorMsg, Legend)

		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " & "Checking Database : " & DBArray(DBCounty).DBName
		End If
		If ErrorCode < 0 Then

			If DO_DATA = "y" Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		Write Data Value for DB " & trim(DBArray(DBCounty).DBName) & " Un-Available"
				End If
				datastring = "DB : " & trim(DBArray(DBCounty).DBName) & " Un-Available" & chr$(10) 
				datastring = datastring & "Status : " & DBArray(DBCounty).DBStatus & chr$(10) 
				sleep(1000)
				DataLog 1, 0, datastring
			End If

			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "		Error Code reports DB error"
			End If
			DBArray(DBCounty).FailCount= DBArray(DBCounty).FailCount + 1
			DBArray(DBCounty).ClearCount = 0
			If DBArray(DBCounty).FailCount >= CONSEC_TIME Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		DB Unavailable for required CONSEC Times"
					Print #2 , Now() & "        " & "		So Event Fired"
				End If
				eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(DBCounty).DBName," ","-") & " FAIL NULL"
				longm = "Database " & DBArray(DBCounty).DBName & " is unavailable" & chr$(10) 
				longm = longm & "Database status " & DBArray(DBCounty).DBStatus  & chr$(10) 
				longm = longm & "Status Messages" & chr$(10) 
				longm = longm & GetDBStatus(DBArray(DBCounty).DBStatus) & chr$(10) 
				MSActions Severity,eventmsg , AKPID, resname, longm
				DBArray(DBCounty).FailCount = 0
				DBArray(DBCounty).EventFired = true
			End If
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        Longm " & longm
				Print #2 , Now() & "        ErrorMsg" & strErrorMsg
			End If
		Else
			If DO_DEBUG  = "y" Then
				Print #2 , Now() & "        " & "		DB available "
			End If
			DBArray(DBCounty).ClearCount = DBArray(DBCounty).ClearCount + 1
			DBArray(DBCounty).FailCount = 0
			'Stop Clear Count Overflowing
			If DBArray(DBCounty).ClearCount = 100 Then
				DBArray(DBCounty).ClearCount = 99 
			End If
			If DO_DATA = "y" Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		Write Data Value for DB " & trim(DBArray(DBCounty).DBName) & " Available"
				End If
				datastring = "DB : " & trim(DBArray(DBCounty).DBName) & " Available" & chr$(10) 
				datastring = datastring & "Status : " & DBArray(DBCounty).DBStatus & chr$(10) 
				sleep(1000)
				DataLog 1, 100, datastring
			End If

			If DBArray(DBCounty).EventFired = true Then
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "		Unavailable Event has been fired so send normal Message"
				End If
				If DBArray(DBCounty).ClearCount >= CONSEC_TIME Then			
					DBArray(DBCounty).ClearCount=0
					DBArray(DBCounty).EventFired = false
					eventmsg = Machinenamestr & " " &  "DB-" & alterstring(DBArray(DBCounty).DBName," ","-") & " AVAIL NULL"
					longm = "Database " & DBArray(DBCounty).DBName & " is available" & chr$(10) 
					longm = longm & "Database status " & DBArray(DBCounty).DBStatus  & chr$(10) 
					longm = longm & "Status Messages" & chr$(10) 
					longm = longm & GetDBStatus(DBArray(DBCounty).DBStatus) & chr$(10) 
					If SEND_NORMAL = "y" Then
						If DO_DEBUG  = "y" Then
							Print #2 , Now() & "        " & "		user has set parameter to send Normal messages so send auto Clear"
						End If
						MSActions 40, eventmsg, AKPID, resname, longm
					Else
						If Mid(AKPID,instr(1,AKPID,"A"),17) = "ACTION_SSICmdPost" Then
							If DO_DEBUG  = "y" Then
								Print #2 , Now() & "        " & "		user has not set parameter to send Normal messages but as action"
								Print #2 , Now() & "        " & "		is a Command post action send Auto Clear anyway"
							End If
							MSActions 40, eventmsg, AKPID, resname, longm
						End If
					End If
				End If
			End If
		End If

	Next DBCounty



If DO_DEBUG  = "y" Then
	Print #2 , Now() & "        " & "Finished Checking DB's"
	Close #2
End If

Exit Sub

GoTo main_exit

main_error:

Select Case Err.Number
Case 52 To 76
	DO_DEBUG = "n"
	eventmsg = Machinenamestr & " " &  "DEBUG ERROR NULL"
	longm = "Unable to open debug file " &  chr$(10) 
	longm = longm & "c:\NetIQ_KSdebug\" & KSName & ".txt" & chr$(10) 
	longm = longm & "This may be due to file being open." & chr$(10)
	longm = longm & "Debugging will be stopped for this script," & chr$(10)
	longm = longm & "Until problem Is fixed."
	MSActions 1,eventmsg , AKPID, resname, longm
	Openfilefail = true
	Resume Next 
Case Else
	If DO_DEBUG  = "y" Then
		Print #2 , Now() & "        " & "Error has occured, exiting script"
		Print #2 , Now() & "        " & Err.description
		Close #2
	End If
	mcabort resname,str(Err.Number)& " " & Err.description
End Select


main_exit:

End Sub

'### End KPS Section


