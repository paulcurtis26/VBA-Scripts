'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### AMAdmin_SSIAgentInstallLite

'$Revision: 13 $

'### Begin KP-Version Section
Const AppManID = "3.4.422.4.13"
Const KSVerID = "1.0"
'### End KP-Version Section

'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 1
'DisplayToolBar = 1
'IAmDiscovery = 0
'RunRightAway = 0
'IAmAction = 0
'IAmInstall = 1
'ObjFullPath = 0
'Description = Install AppManager agent remotely

'### End KP-Status Section

'### Begin KPC Section
'KPC = OneTime
'### End KPC Section

'### Begin Type Section
Const NT_MachineFolder = ""

'### End Type Section

'### Begin KPP Section
' [V<Installs the Agent on remote managed clients, for NT or other selected applications. The MS you're using and remote MCs must be in the same domain or trusted domains. A severe event is raised when the install fails on any remote MC.>V]
Const DO_EVENT = "y" 					'[M<Raise Event When Complete? (y/n)>M][T<string,1,' ',"yn">T]
Const Severity = 15 					'[M<Event Severity When Complete>M][T<integer,1,' ',1,40,SevLevel>T]
Const User = "PaulCurtis-a" 					'[M<User for remote install>M][T<Req_String,128,'^',"">T]
Const Password = "password" 				'[M<Password for remote install user>M][T<Req_String,32,'^',"">T][I<I_EDIT(2)>I]
Const Domain = "EUROPEDEV1" 						'[M<Domain of remote install user>M][T<Req_String,128,'^',"">T]
Const Source = "\\lonsmh0s0102\e$\34imag" 						'[M<AppManager Release Directory, one level above i386/Alpha>M][T<Req_String,128,'^',"">T]
Const TempDir = "c:\temp\AgtInst" 		'[M<Temporary directory on target machine>M][T<Req_String,128,'^',"">T]
Const InstallPath = "c:\netiq" 			'[M<Install Path on target machine>M][T<Req_String,128,'^',"">T]
Const MdbPath = "c:\netiq\db" 			'[M<Local Repository Path on target machine>M][T<Req_String,128,'^',"">T]
Const MdbUpGrade = "n" 					'[M<Upgrade Local-Repository?>M][T<string,1,' ',"yn">T]
Const UseDAO = "n" 						'[M<Use DAO? (y:DAO/n:ODBC)>M][T<string,1,' ',"yn">T]
Const MSMachine = "LONSMH0S0102" 					'[M<Management Server>M][T<Req_String,128,'^',"">T]
Const AccessList = "*" 					'[M<Authorized Management Servers>M][T<Req_String,128,'^',"">T]
Const NTAccountDomain = "DomainName" 	'[M< Domain of NT account - Mapi/Exch/RunAs>M][T<String,40,'^',"">T]
Const NTAccountUser = "netiq_nt" 		'[M< NT account user - Mapi/Exch/RunAs>M][T<Req_String,40,'^',"">T]
Const NTAccountPwd = "netiq_nt" 		'[M< NT account password - Mapi/Exch/RunAs>M][T<string,32,'^',"">T][I<I_EDIT(2)>I]
Const Mailbox = "" 						'[M< Exchange Mailbox Alias - Mapi/Exch>M][T<String,40,'^',"">T]
Const Profile = "" 						'[M< Exchange Profile - Mapi/Exch>M][T<String,40,'^',"">T]
Const CommunityStr = "public" 			'[M< SNMP Community - Cim/Hpns/Dell/Netfinity/Siemens>M][T<string,40,' ',"">T]
Const DO_RUNAS = "n" 					'[M<*Run MC as NT account? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_MAPI = "n" 					'[M<*Enable MAPI mail? (y/n)>M][T<string,1,' ',"yn">T]
Const MailSrv = "ExchangeServer" 		'[M< Exchange Server>M][T<string,40,' ',"">T]
Const DO_EXCH = "n" 					'[M<*Install Exchange managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const CreateMailbox = "n" 				'[M< Allow setup to create mailbox? (y/n)>M][T<string,1,' ',"yn">T]
Const StartExch = "n" 					'[M< Start MS Exchange Directory Service? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_SQL = "n" 						'[M<*Install SQL managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const LocalSAPwd = "" 					'[M< Local sa Password>M][T<string,32,'^',"">T][I<I_EDIT(2)>I]
Const DO_CIM = "n" 						'[M<*Install CIM managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_IIS = "n" 						'[M<*Install IIS managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_MSMQ = "n" 					'[M<*Install Message Queue Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const MSMQSAPwd = "" 					'[M< Local sa Password>M][T<string,32,'^',"">T][I<I_EDIT(2)>I]
Const DO_MSCS = "n" 					'[M<*Install Cluster Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_MTS = "n" 						'[M<*Install Transaction Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_PROXY = "n" 					'[M<*Install Proxy Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_WBEM = "n" 					'[M<*Install WMI managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_WINFRAME = "n" 				'[M<*Install Citrix WinFrame Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_WTS = "n" 						'[M<*Install WTS Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_BKUPEXEC = "n" 				'[M<*Install BackupExec managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_SNA = "n" 						'[M<*Install SNA Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_SITE = "n" 					'[M<*Install Site Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_WLBS= "n" 						'[M<*Install WLBS Server managed object? (y/n)>M][T<string,1,' ',"yn">T]

' [A<When the event is turned on and is encountered, the selected action is taken.>A]
Const AKPID = "AKP_NULL" ' [M<Action taken>M]
'### End KPP Section

'### Begin KPS Section
Const DO_SMS = "n" 						'[M<*Install SMS managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_NETWORKER = "n" '[M<*Install NetWorker managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_ARCSERVE = "n" '[M<*Install ARCserve managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_LOTUS = "n" '[M<*Install Lotus Domino managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_LOTUS_CONFIG = "y" '[M< Automatically Configure Lotus Domino? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_HPNS = "n" '[M<*Install HP NetServer managed object? (y/n)>M][T<string,1,' ',"yn">T]
'''''Const OracleService = "ORACLE" '[M< Oracle service name>M][T<string,40,'^',"">T]	'CRS 7917:Remove OracleService from KPP section, but keep it as a Const to keep in sync with installation. 
Const DO_DELL = "n" '[M<*Install DELL OpenManage Agent managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_ORACLE = "n" '[M<*Install Oracle Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_SIEMS= "n" '[M<*Install Siemens ServerView managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const DO_NETFIN = "n" '[M<*Install Netfinity Server managed object? (y/n)>M][T<string,1,' ',"yn">T]
Const OracleUser = "system" '[M< Oracle account user>M][T<string,40,'^',"">T]
Const OracleUserPwd = "manager" '[M< Oracle account password>M][T<string,32,'^',"">T][I<I_EDIT(2)>I]

Type PROCESS_INFO
	hProcess As Long
	hThread As Long
	dwProcessId As Long
	dwThreadId As Long 
End Type

Type STARTUPINFO
	cb As Long
	lpReserved As String
	lpDesktop As String
	lpTitle As String
	dwX As Long
	dwY As Long
	dwXSize As Long
	dwYSize As Long
	dwXCountChars As Long
	dwYCountChars As Long
	dwFillAttribute As Long
	dwFlags As Long
	wShowWindow As Integer
	cbReserved2 As Integer
	lpReserved2 As Long
	hStdInput As Long
	hStdOutput As Long
	hStdError As Long
End Type



Declare Function CreateProcess Lib "kernel32" Alias _
	"CreateProcessA" (ByVal lpApplicationName As String, _
		ByVal lpCommandLine As String, _
		ByVal lpProcessAttributes As Any, _
      	ByVal lpThreadAttributes As Any, _
		ByVal bInheritHandles As Long, _
      	ByVal dwCreationFlags As Long, _
		ByVal lpEnvironment As Any, _
		ByVal lpCurrentDirectory As String, _
		lpStartupInfo As STARTUPINFO, _
      	lpProcessInformation As PROCESS_INFO) As Boolean

Declare Sub CloseHandle Lib "kernel32.dll" Alias _
	"CloseHandle" (ByVal hObject As Long) 

Declare Function WaitForSingleObject Lib "kernel32.dll" Alias _
	"WaitForSingleObject" (ByVal hHandle As Long, _
		ByVal dwMilliSec As Long) As Long

Declare Function GetExitCodeProcess Lib "kernel32.dll" Alias _
	"GetExitCodeProcess" (ByVal hProcess As Long, _
		ExitCode As Long) As Boolean

Declare Function GetCurrentThreadId Lib "kernel32.dll" Alias _
	"GetCurrentThreadId" () As Long

Declare Sub Cleanup	()

Const NORMAL_PRIORITY_CLASS = &H20&
Const STARTF_USESHOWWINDOW  = &H1&
Const STARTF_USESTDHANDLES  = &H100&
Const SW_HIDE       = &H0&
Const INFINITE      = &HFFFFFFFF&
Const STILL_ACTIVE  = &H103&
Const WAIT_FAILED   = &HFFFFFFFF&
Const WAIT_OBJECT_0 = &H0&
Const OracleService = "LocalOracle"   'CRS 7917:Remove OracleService from KPP section, but keep OracleService as a Const to keep in sync with installation script. 

'
'  win32 registry functions
'
Global Const REG_SZ As Long = 1
Global Const HKEY_LOCAL_MACHINE = &H80000002 
Global Const ERROR_NONE = 0 
Global Const KEY_READ       = &H19

Declare Function RegCloseKey Lib "advapi32.dll" _ 
		(ByVal hKey As Long) As Long 
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias _ 
		"RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _ 
		ByVal ulOptions As Long, ByVal samDesired As Long, ByRef phkResult As Long) As Long 
Declare Function RegQueryValueExString Lib "advapi32.dll" Alias _ 
		"RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _ 
		String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
		As String, lpcbData As Long) As Long 
'
Declare Function RegConnectRegistry Lib "advapi32.dll" Alias _
                "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hkey As Long, _
                ByRef phkResult As Long) As Long 

'
'	Global variables
'
Dim LocalInstallPath As String
Dim bStopJob As Boolean
Dim MCWaitNoAbortOnStop As Boolean
Dim bError As Boolean
Dim bWarning As Boolean
Dim errormsg As String

Dim InstallMgrCmd As String
Dim Quo As String
Dim NL As String	 			' newline
Dim CR As String	 			' newline
Dim NULLSTR As String
Dim YES As String
Dim DOLLAR_STR As String
Dim BKSLASH As String
Dim DBBKSLASH As String
Dim sUNC As String
Dim tUNC As String
Dim OSversionHost As String			'crs 8219
Dim OSversionTarget As String			'crs 8219
Dim targetDiskSpace As Long				'crs 8402


Function RemoveLastSlash(filename As String) As String

If right(filename,1) = "\" Then
	RemoveLastSlash = left(filename,Len(filename)-1)
Else
	RemoveLastSlash = trim(filename)
End If

End Function



Function GetPlatformInfo() As String
	Dim lRetVal&, hKey&, hKeyServer&, DataName$, DataLen&
	
	GetPlatformInfo = NULLSTR
    lRetVal  = RegConnectRegistry(DBBKSLASH & NT_MachineFolder, HKEY_LOCAL_MACHINE, hKeyServer)
	If (lRetVal <> ERROR_NONE) Then 
	    GoTo Out 
	End If
	lRetVal = RegOpenKeyEx(hKeyServer, "SYSTEM\CurrentControlSet\Control\Session Manager\Environment", 0, _
		KEY_READ, hKey)
	 
	DataLen = 256
	DataName = String$(DataLen, 0)	
	lRetVal = RegQueryValueExString(hKey, "Processor_Architecture", 0&, REG_SZ, DataName, DataLen)
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataName = Left$(DataName, DataLen-1)
	DataName = Trim$(DataName)
	GetPlatformInfo = DataName
	
OUT:
	lRetVal = RegCloseKey (hKey)
	lRetVal = RegCloseKey (hKeyServer)
End Function

'
'
Function GetInstallPath() As String
	Dim lRetVal&, hKey&, DataName$, DataLen&
	
	GetInstallPath = NULLSTR
	lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "SOFTWARE\NetIQ\AppManager", 0, _
		KEY_READ, hKey)
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataLen = 256
	DataName = String$(DataLen, 0)	
	lRetVal = RegQueryValueExString(hKey, "InstallPath", 0&, REG_SZ, DataName, DataLen)
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataName = Left$(DataName, DataLen-1)
	DataName = Trim$(DataName)
	GetInstallPath = DataName
OUT:
	lRetVal = RegCloseKey (hKey)
End Function


Function CreateIniFile (ByVal sFileName As String) As Boolean
	' Create the ini file
	Dim FileNum%

	'On Error GoTo ERROUT
	FileNum = FreeFile
	Open sFileName For Output As #FileNum	

	Print #FileNum, "InstallPath=" & InstallPath
	Print #FileNum, "MdbPath=" & MdbPath
	Print #FileNum, "MSMachine=" & MSMachine
	Print #FileNum, "AccessList=" & AccessList
	Print #FileNum, "NTAccountDomain=" & NTAccountDomain
	Print #FileNum, "NTAccountUser=" & NTAccountUser
	Print #FileNum, "NTAccountPwd=" &NTAccountPwd
	Print #FileNum, "Mailbox=" & Mailbox
	Print #FileNum, "Profile=" & Profile
	Print #FileNum, "CommunityStr=" & CommunityStr
	Print #FileNum, "MailSrv=" & MailSrv
	Print #FileNum, "LocalSAPwd=" & LocalSAPwd
	Print #FileNum, "MSMQSAPwd=" & MSMQSAPwd
	Print #FileNum, "OracleService=" & OracleService
	Print #FileNum, "OracleUser=" & OracleUser
	Print #FileNum, "OracleUserPwd=" & OracleUserPwd
	
	If MdbUpGrade = YES Then	'crs 8663 agentinstall mc local repository upgrade does not work.
		Print #FileNum, "MdbUpGrade"
	End If
	
	If UseDAO = YES Then
		Print #FileNum, "UseDAO"
	End If

	If DO_RUNAS = YES Then
		Print #FileNum, "DO_RUNAS"
	End If
	If DO_MAPI = YES Then
		Print #FileNum, "DO_MAPI"
	End If
	If DO_EXCH = YES Then
		Print #FileNum, "DO_EXCH"
	End If
	If CreateMailbox = YES Then
		Print #FileNum, "CreateMailbox"
	End If
	If StartExch = YES Then
		Print #FileNum, "StartExch"
	End If
	If DO_SQL = YES Then
		Print #FileNum, "DO_SQL"
	End If
	If DO_CIM = YES Then
		Print #FileNum, "DO_CIM"
	End If
	If DO_SMS = YES Then
		Print #FileNum, "DO_SMS"
	End If
	If DO_IIS = YES Then
		Print #FileNum, "DO_IIS"
	End If
	If DO_LOTUS = YES Then
		Print #FileNum, "DO_LOTUS"
	End If
	If DO_LOTUS_CONFIG = YES Then
		Print #FileNum, "DO_LOTUS_CONFIG"
	End If
	If DO_MSMQ = YES Then
		Print #FileNum, "DO_MSMQ"
	End If					 
	If DO_MSCS = YES Then
		Print #FileNum, "DO_MSCS"
	End If
	If DO_MTS = YES Then
		Print #FileNum, "DO_MTS"
	End If
	If DO_PROXY = YES Then
		Print #FileNum, "DO_PROXY"
	End If
	If DO_HPNS = YES Then
		Print #FileNum, "DO_HPNS"
	End If
	If DO_WBEM = YES Then
		Print #FileNum, "DO_WBEM"
	End If
	If DO_WINFRAME = YES Then
		Print #FileNum, "DO_WINFRAME"
	End If
	If DO_WTS = YES Then
		Print #FileNum, "DO_WTS"
	End If
	If DO_DELL = YES Then
		Print #FileNum, "DO_DELL"
	End If
	If DO_ORACLE = YES Then
		Print #FileNum, "DO_ORACLE"
	End If
	If DO_ARCSERVE = YES Then
		Print #FileNum, "DO_ARCSERVE"
	End If
	If DO_BKUPEXEC = YES Then
		Print #FileNum, "DO_BKUPEXEC"
	End If
	If DO_NETFIN = YES Then
		Print #FileNum, "DO_NETFIN"
	End If
	If DO_NETWORKER = YES Then
		Print #FileNum, "DO_NETWORKER"
	End If
	If DO_SNA = YES Then
		Print #FileNum, "DO_SNA"
	End If
	If DO_SITE = YES Then
		Print #FileNum, "DO_SITE"
	End If
	If DO_WLBS = YES Then
		Print #FileNum, "DO_WLBS"
	End If
	If DO_SIEMS = YES Then
		Print #FileNum, "DO_SIEMS"
	End If
	
	Print #FileNum, "End Of File"

  	Close #FileNum
	On Error GoTo 0
	CreateIniFile = TRUE
	Exit Function
ERROUT:
	Dim resname As String

	resname = "NT_MachineFolder = " & NT_MachineFolder
   	MSActions 5, NULLSTR, AKPID, resname, Err.Description
End Function

'
'  return TRUE if error string found
'
Function GetResultData (ByVal dwProcessId As Long, ByRef sResultData As String)	_
		As Boolean
	Dim sDataFile As String
	Dim sDataLine As String

	sResultData = NULLSTR
	GetResultData = FALSE	
	If (dwProcessId = 0)  Then
		GoTo OUT
	End If

	sDataFile = LocalInstallPath + "\nqsms" + Cstr(dwProcessId) + ".txt" 
	If (Not FileExists(sDataFile))  Then
		GoTo OUT
	End If
	Open sDataFile For Input As #9
	While Not EOF(9)
		Line Input #9, sDataLine
		If (InStr(1, sDataLine, "WARNING", 1)) Then
			 GetResultData =  TRUE
			 bWarning = TRUE
			 sResultData = sResultData & NL & sDataLine
		End If
		If (InStr(1, sDataLine, "ERROR", 1)) Then
			 GetResultData =  TRUE
			 bError = TRUE
			 sResultData = sResultData & NL & sDataLine
		End If
		
	Wend
	Close #9
	kill sDataFile
OUT:
End Function


'
'	0 success
'	> 0 fail
'
Function RunCmd (ByVal cmdLine As String, ByVal abortKs As Boolean, ByVal getResults As Boolean, ByVal eMsg As String) As Long
	Dim pInfo As PROCESS_INFO
	Dim sInfo As STARTUPINFO
	Dim sNull As String
	Dim success As Boolean
 	Dim ret As Long
	Dim exitCode As Long
	Dim eventmsg As String
	Dim resname As String
	Dim fileSize As Integer
	Dim rc As Boolean
	Dim sResultData As String
	Dim dwProcessId As Long

	ret = 1	
	resname = "NT_MachineFolder = " & NT_MachineFolder
	success = TRUE
   	sInfo.dwFlags = STARTF_USESHOWWINDOW
	sInfo.wShowWindow = SW_HIDE
	sInfo.cb = Len(sInfo)
	rc = FALSE


	dwProcessId = 0
	success = CreateProcess (sNull, cmdLine, 0&, 0&, 0&, NORMAL_PRIORITY_CLASS, _
		0&, sNull, sInfo, pInfo)

	If (success = FALSE) Then
		errormsg = "Failed to create process " & cmdLine
		GoTo OUT
	End If
	
	dwProcessId = pInfo.dwProcessID
'ret = WaitForSingleObject (pInfo.hProcess, INFINITE) 'for debug mode
'If (ret <> WAIT_OBJECT_0) Then						  'for debug mode

	ret = MCWaitForObject(TRUE, pInfo.hProcess)
 	If (ret = 0) Then
		' Failed
		errormsg = "Failed to wait process with " & ret
		success = FALSE
		GoTo OUT
	End If
	If (ret = -2) Then
		' Stopped
		errormsg = "Stop Job request from user."
		GoTo OUT
	End If

	success = GetExitCodeProcess(pInfo.hProcess, exitCode)
	If (success = FALSE) Then
		errormsg = "Failed to obtain process exit code"
		GoTo OUT
	End If
   	RunCmd = exitCode
	targetDiskSpace = exitCode
OUT:
	If (getResults = TRUE) Then
		rc = GetResultData(dwProcessId,sResultData)
		If (Len(sResultData) > 0)  Then
   			errormsg = 	errormsg & NL & sResultData
   		End If
	End If

	CloseHandle (pInfo.hProcess)
	CloseHandle (pInfo.hThread)

	If ((ret = -2 Or success = FALSE Or bError = TRUE) And abortKs = TRUE) Then
		Cleanup
		errormsg = errormsg & NL & eMsg
		MCAbort resname, errormsg
	End If

	If (success = FALSE And ret <> -2) Then
		errormsg = errormsg & NL & eMsg
	End If
	RunCmd = ret
End Function

Sub Cleanup ()
	Dim rc As Long
	cmdLine = InstallMgrCmd & " -agent " & NT_MachineFolder & " "

	rc = RunCmd(cmdLine & "-stop", FALSE, TRUE, "WARNING: Fail to stop nqexecd service.")
	rc = RunCmd(cmdLine & "-delete", FALSE, TRUE, "WARNING: Fail to delete nqexecd service.")

	rc = RunCmd("cmd /c del /q /s " & sUNC, FALSE, FALSE, "WARNING: Failed to clean up files.")	
 	rc = RunCmd("cmd /c rmdir /s /q " & sUNC, FALSE, FALSE, "WARNING: Failed to remove temp directory.")
	rc = RunCmd("cmd /c rmdir /s /q " & tUNC, FALSE, FALSE, NULLSTR)
End Sub

Function GetOSVersion (ByRef osHost As String, ByRef osTarget As String) As Boolean	'crs 8219
	Dim lRetVal&, hKey&, hKeyServer&, DataName$, DataLen&
	'get host os version
   	lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "Software\Microsoft\Windows NT\CurrentVersion", 0, _
		KEY_READ, hKey)
	
	DataLen = 256
	DataName = String$(DataLen, 0)	
	lRetVal = RegQueryValueExString(hKey, "CurrentVersion", 0&, REG_SZ, DataName, DataLen)
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataName = Left$(DataName, DataLen-1)
	DataName = Trim$(DataName)
	osHost = DataName
	lRetVal = RegCloseKey (hKey)

	'get target os version
	DataName=""
    lRetVal  = RegConnectRegistry("\\" & NT_MachineFolder, HKEY_LOCAL_MACHINE, hKeyServer)
	If (lRetVal <> ERROR_NONE) Then 
	    GoTo Out 
	End If
	lRetVal = RegOpenKeyEx(hKeyServer, "Software\Microsoft\Windows NT\CurrentVersion", 0, _
		KEY_READ, hKey)
	 
	DataLen = 256
	DataName = String$(DataLen, 0)	
	lRetVal = RegQueryValueExString(hKey, "CurrentVersion", 0&, REG_SZ, DataName, DataLen)
	If (lRetVal <> ERROR_NONE) Then
		GoTo OUT
	End If
	DataName = Left$(DataName, DataLen-1)
	DataName = Trim$(DataName)
	osTarget = DataName
	
OUT:
	lRetVal = RegCloseKey (hKey)
	lRetVal = RegCloseKey (hKeyServer)

End Function

Function GetXcopy (ByVal osVersion As String) As String	'crs 8219
	Dim XcopyCmd As String

	If osVersion = "5.0" Then
		XcopyCmd = "cmd /c xcopy /q /y " 
	ElseIf osVersion = "4.0" Then
		XcopyCmd = "cmd /c xcopy /q "
	Else
		XcopyCmd = "cmd /c xcopy /q " 
	End If

	GetXcopy = XcopyCmd		 
End Function
'
'
'
Sub Main()
	Dim bRet As Long
	Dim cmdLine As String
	Dim sTempDir As String
  	Dim ret As String
	Dim resname As String
	Dim dwProcessId As Long
	Dim bRc As Boolean
	Dim sEventMessage As String	
	Dim sCPUType As String
	Dim Source_s As String
	Dim diskSpaceTemp As Long
	Dim diskSpaceTarget As Long
	Dim cmdParam As String
	Dim iniFile As String
	Dim eMsg As String
	Dim rc As Long
	Dim cmdXcopyHost As String	'crs 8219
	Dim cmdXcopyTarget As String	'crs 8219
	Dim getOSError As Boolean		'crs 8219
	Dim nqsms_mCmd As String 	'crs8402

	bStopJob = FALSE
	MCWaitNoAbortOnStop = FALSE
	bError = FALSE
	bWarning = FALSE
		
	InstallMgrCmd = "nqsms_m.exe"
	Quo = """"
	NL = chr$(10)
	CR = chr$(13)
	NULLSTR = ""
	YES = "y"
	DOLLAR_STR = "$"
	BKSLASH = "\"
	DBBKSLASH = "\\"


	x% = ItemCount(TempDir," ")
	If x% > 1 Then
		errormsg = "Please specify a temporary directory that does not contain a space"
		GoTo OUT
	End If

	LocalInstallPath = GetInstallPath ()
	If (LocalInstallPath = NULLSTR) Then
		errormsg = "Failed to retrieve the local install path"
		GoTo OUT
	End If

	'
	'  Sanity check
	'
    On Error GoTo OUT
    errormsg = "Cannot access the specified temp or install directory on target machine." & CR & NL & _
			   "Verify the target machine is running and the specified paths are valid." & CR & NL & _
			   "Verify NetIQmc and NetIQccm services on the management machine are running as an NT account with permission to access the specified paths on the target machine."

	' Check the disk space of the remote machine. If not enough, then abort here.
	'diskSpaceTemp = DiskFree (DBBKSLASH & NT_MachineFolder & BKSLASH & Mid$(TempDir,1,1) & DOLLAR_STR)
	'diskSpaceTarget = DiskFree (DBBKSLASH & NT_MachineFolder & BKSLASH & Mid$(InstallPath,1,1) & DOLLAR_STR)
	nqsms_mCmd = Quo & GetInstallPath & BKSLASH & "bin\nqsms_m.exe" & Quo  
	diskSpaceTemp = RunCmd(nqsms_mCmd & " -diskfree " & Quo & DBBKSLASH & NT_MachineFolder & BKSLASH & Mid$(TempDir,1,1) & DOLLAR_STR & Quo, TRUE, TRUE, eMsg) 	'crs 8402
	If (targetDiskSpace >= 0 And targetDiskSpace < 20) Then '20mb	'crs 8402 	'''''If ( >= 0 And diskSpaceTemp < 20971520) Then '20mb
		errormsg = "Not enough disk space On the temp drive"
		GoTo OUT
	End If
	
	diskSpaceTarget = RunCmd(nqsms_mCmd & " -diskfree " & Quo & DBBKSLASH & NT_MachineFolder & BKSLASH & Mid$(InstallPath,1,1) & DOLLAR_STR & Quo, TRUE, TRUE, eMsg)	'crs 8402 	
	If (targetDiskSpace >= 0 And targetDiskSpace < 15) Then '20mb	'crs 8402	'''''If (diskSpaceTarget >= 0 And diskSpaceTarget < 15728640) Then	'15mb
		errormsg = "Not enough disk space On the temp drive"
		GoTo OUT
	End If

	On Error GoTo 0
	errormsg = NULLSTR

	sCPUType = GetPlatformInfo()
	getOSError=GetOSVersion(OSVersionHost, OSVersionTarget)	'crs 8219

	If (sCPUType = NULLSTR) Then
		errormsg = "Verify NetIQmc and NetIQccm services on the management machine are running as an NT account with permission to access machine " & NT_MachineFolder
		GoTo OUT
	End If

	'LocalInstallPath = GetInstallPath ()
	'If (LocalInstallPath = NULLSTR) Then
	'	errormsg = "Failed to retrieve the local install path"
	'	GoTo OUT
	'End If

	'  append \ to the end of path to make xcopy and del happy
	'  replace : with $ for driver letter.
	'
	 sTempDir = RemoveLastSlash(TempDir) & "\"

	iWhere = InStr(sTempDir, ":")
	If (iWhere <> 0)  Then
		tUNC = "\\" & NT_MachineFolder & "\" & Mid(sTempDir, 1, iWhere - 1) & "$" &_
			Mid(sTempDir, iWhere + 1, Len(sTempDir))
	Else
		tUNC = "\\" & NT_MachineFolder & "\" & sTempDir
	End If


	sTempDir = sTempDir & "AgtInst\"
	sUNC = tUNC & "AgtInst\"


	eMsg = "ERROR: Failed to copy setup files over to " & sUNC & CR & NL & _
		   "Verify " & LocalInstallPath & " directory contains the AppManager bootstrap files" & CR & NL & _ 
		   "Verify NetIQmc and NetIQccm services on the management machine are running as an NT account with permission to access " & LocalInstallPath & " and " & sUNC & CR & NL & _
		   "Verify nqexecd is not running on the remote machine"
	rc = RunCmd("cmd /c md " & sUNC, TRUE, FALSE, eMsg)

	'cmdLine = "cmd /c xcopy /q "
	 cmdXcopyHost = GetXCopy(OSVersionHost)	'crs 8219
	If ( UCase$(sCPUType) = "X86" ) Then
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\nqsms_a.exe" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg) 	
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\msvcrt.dll" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg)
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\nqAgtInstall.exe" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg) 	
	ElseIf ( UCase$(sCPUType) = "ALPHA") Then
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\nqsms_aa.exe" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg) 	
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\nqAgtInstalla.exe" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg) 	
		rc = RunCmd(cmdXcopyHost & Quo & LocalInstallPath & "\bin\msvcrta.dll" & Quo & " " & Quo & sUNC & Quo, TRUE, FALSE, eMsg)
   		rc = RunCmd("cmd /c copy " & Quo & sUNC & "nqsms_aa.exe" & Quo & " " & Quo & sUNC & "nqsms_a.exe" & Quo, TRUE, FALSE, eMsg)
		rc = RunCmd("cmd /c copy " & Quo & sUNC & "nqAgtInstalla.exe" & Quo & " " & Quo & sUNC & "nqAgtInstall.exe" & Quo, TRUE, FALSE, eMsg)
		rc = RunCmd("cmd /c copy " & Quo & sUNC & "msvcrta.dll" & Quo & " " & Quo & sUNC & "msvcrt.dll" & Quo, TRUE, FALSE, eMsg)
	End If
	
	iniFile = NT_MachineFolder & ".ini"	
	'
	' +++ more error checking
	' 
	bRc = CreateIniFile (sUNC & BKSLASH & iniFile)
	If (bRc = FALSE) Then
		errorMsg = "ERROR: Failed to create ISS file for setup."
	End If
	
	'
	'
	' 
	cmdLine = InstallMgrCmd & " -agent " & NT_MachineFolder & " "
	rc = RunCmd(cmdLine & "-create -path " & sTempDir & "nqsms_a.exe", TRUE, TRUE, "ERROR: Failed to create nqexecd service")
	rc = RunCmd(cmdLine & "-start", TRUE, TRUE, "ERROR: Failed to start nqexecd service.")
	
	'
	'  the user setup will run as, if logon failed, it will happen here...
	'
	eMsg = "ERROR: Failed to logon target machine with given user account and password."
	rc = RunCmd(cmdLine & "-request @domain -data " & QUO & Domain & QUO, TRUE, TRUE, eMsg)
	rc = RunCmd(cmdLine & "-request @user -data " & QUO & User & QUO, TRUE, TRUE, eMsg)
	rc = RunCmd(cmdLine & "-request @passwordee -data " & QUO & Password & QUO, TRUE, TRUE, eMsg)
	'rc = RunCmd(cmdLine & "-request @password -data " & QUO & Password & QUO, TRUE, TRUE, eMsg)	'debug mode
	
	'
	' Run the agent install executable
	'
	cmdParam = " -machine " & NT_MachineFolder & " -ini " & sTempDir & iniFile & " -target " & sTempDir
	rc = RunCmd(cmdLine & "-request " & QUO & "cmd /c echo " & sTempDir & _
				"nqAgtInstall.exe" & cmdParam & " > " & sTempDir & "nqAgtInstall.bat" & QUO, TRUE, TRUE, NULLSTR)
	rc = RunCmd(cmdLine & "-request " & sTempDir & "nqAgtInstall.bat", TRUE, TRUE, "ERROR: Failed to run nqAgtInstall.")

	'
	'  file set verification
	' 
    On Error GoTo CLEAN_UP
    errormsg = "ERROR: Invalid Network name for Distribution directory." 
	bError = TRUE
	
	Source_s = RemoveLastSlash(Source)																										
	If ( UCase$(sCPUType) = "X86" ) Then
		If Not FileExists(Source_s & "\NQX86") Then
			If Not FileExists(Source_s & "\i386\NQX86") Then
				errormsg = "ERROR: Invalid AppManager i386 distribution directory"
				GoTo CLEAN_UP
			Else
				Source_s = RemoveLastSlash(Source) & "\i386" 
			End If
		End If
	ElseIf ( UCase$(sCPUType) = "ALPHA") Then
		If Not FileExists(Source_s & "\NQALPHA") Then
			If Not FileExists(Source & "\Alpha\NQALPHA") Then
				errormsg = "ERROR: Invalid AppManager ALPHA distribution directory"
				GoTo CLEAN_UP
			Else
				Source_s = RemoveLastSlash(Source) & "\Alpha" 
			End If
		End If
	End If
	On Error GoTo 0
	errormsg = ""
	bError = FALSE

	'
	'  file transfer.
	'
	cmdXcopyTarget=GetXCopy(OSVersionTarget)	'crs 8219 	
	eMsg = "ERROR: Failed to copy distribution files over to " & sUNC & CR & NL & _
		   "Verify " & Source_s & " directory exists and contains the AppManager distribution files" & CR & NL & _ 
		   "User for remote install should have permission to access " & Source_s & " and " & sUNC
	'CommandLine = cmdLine & "-request " & QUO & "cmd /c xcopy /q " & Source_s & " " & sUNC & " /exclude:" & sUNC & "exclude.txt" & QUO
	CommandLine = cmdLine & "-request " & QUO & cmdXcopyTarget & Source_s & " " & sUNC & " /exclude:" & sUNC & "exclude.txt" & QUO '''''crs8219
	rc = RunCmd(CommandLine, TRUE, TRUE, eMsg)

	'
	'  rename mc.cab to data1.cab
	'
	CommandLine = cmdLine & "-request " & QUO & "cmd /c rename " & sTempDir & "mc.cab data1.cab" & QUO
	rc = RunCmd(CommandLine, TRUE, TRUE, "ERROR: Failed to rename mc.cab file to data1.cab")

	'
	' run the installation command
	rc = RunCmd(cmdLine & "-request " & QUO & "cmd /c echo change user /install >" & _
		sTempDir & "setup.bat" & QUO, FALSE, FALSE, "")

	'	
	rc = RunCmd(cmdLine & "-request " & QUO & "cmd /c echo " & sTempDir & _
		"setup.exe -s -f1" & sTempDir & NT_MachineFolder & ".iss >>" & _
		sTempDir & "setup.bat" & QUO, TRUE, TRUE, "ERROR: Failed to prepare batch file for setup.")

	rc = RunCmd(cmdLine & "-request " & sTempDir & "setup.bat -data %windir%\appmgr.err", TRUE, TRUE, "ERROR: Failed to run setup program.")

CLEAN_UP:
	Cleanup 
	
	iError = InStr(errormsg, "ERROR")
	iWarning = InStr (errormsg, "WARNING")
	
	If (iError <> 0) Then
		MSActions 1, "AppManager Agent installation failed", AKPID, NT_MachineFolder, errormsg
	ElseIf (iWarning <> 0) Then
		MSActions Severity, "AppManager Agent partially complete", AKPID, NT_MachineFolder, errormsg 
	Else
        If (DO_EVENT = YES)  Then
			MSActions Severity, "AppManager Agent installation complete", AKPID, NT_MachineFolder, errormsg   
	    End If
	End If

	Exit Sub
OUT:
   	resname = "NT_MachineFolder = " & NT_MachineFolder
	MCAbort resname, errormsg
End Sub


'### End KPS Section

