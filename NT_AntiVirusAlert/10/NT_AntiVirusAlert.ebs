'### This is an .ebs file generated by KSCheckout.
'### It can be checked in to the repository by invoking kscheckin.
'###
'### NT_AntiVirusAlert

'### Begin KP-Status Section
'NeedKPW = 0
'AdminOnly = 0
'DisplayToolBar = 1
'IAmDiscovery = 0
'IAmAction = 0
'Description = Raises an alert when Virus Found is logged in the NT Event Log

'### End KP-Status Section

'### Begin KPC Section
'Parameters = 0 128 0 4 10 1 1 2147483647 0 99991231 0 235959

'### End KPC Section

'### Begin Type Section
Const NT_MachineFolder = ""

'### End Type Section

'### Begin KPP Section

'### Author 		: Paul Curtis
'### Version		: 1.0
'### Description	: Use's Event Log to Check for Virus Events Generated


' [V<Select a Log Source. Set Events in past N hours, which checks for the first interval, to: -1 (all previous hours), 0 (events happening from now on) or xx (previous # of hours). Event IDs are in the format of "1-20,35,40-50".(Version 1.0)>V]
' [A<When one or more event log entries are found during the current interval, the selected action is taken.>A]
Const DO_EVENT = "y" '[M<Event? (y/n)>M][T<string,1,' ',yn">T]
Const DO_DATA = "n" '[M<Collect Data? (y/n)>M][T<string,1,' ',yn">T]
Const RecentHours = 0 '[M<Events in past N hours>M][T<integer,1,' ',-1,1e+007,hours>T]
Const GroupFactor = 30 '[M<Max # of Entries per Event Report>M][T<integer,1,' ',1,100,GroupFactor>T]
Const Severity = 8 '[M<Event Severity>M][T<integer,1,' ',1,40,SevLevel>T]
Const AKPID = "AKP_NULL" ' [M<Action Taken>M]
Const NoOccurances = 1 '[M<No of Occurances that can occur before event fired>M][T<integer,1,' ',-1,1e+007,Time(s)>T]
Const DO_DEBUG = "y"		'[M<Write Debug Info? (y/n)>M] [T<String,1,,"yn">T]

'### End KPP Section

'### Begin KPS Section
'Define constants used throughout procedure
Const Category = "" 
Const User = "" 
Const Computer = "" 
Const Description = "" 
Const Log = "Application"		
Const TypeError = "y" 
Const TypeWarning = "n" 
Const TypeInformation = "n" 
Const TypeSuccessAudit = "n"
Const TypeFailureAudit = "n"
Const Source = "AlertManager"	
Const Event = "257"			
Const DataHeaderTxt = "Virus Found"		
Dim ShortMsgTxt As String 
Const KSName = "NT_AntiVirusAlert"  
'end of constant declarations
'these are removed from the parameter screen and moved into the procedure to simplify 
'the set up of the script.
Dim NT As Object
Dim OBJ As Object
Const UNITNUMBER = "^^#"
Dim RepType As Long
Private RecNum As Long		' Record Number - persistent across iterations
Private Iter As Long		' Iteration Count - persistent across iterations
Private resname$
Private Occurences As Integer 'Number of times this event has occurred

'Used to create Debug Directory, if it does not exist.
'This is a seperate function so that "On Error Resume Next" can be used for just this code.
Function createdebugdir() As Integer
	On Error Resume Next

	Dim dirname As String 
	dirname = "c:\NetIQ_KSdebug\"

	MkDir dirname
	If Err <> 0 Then
		createdebugdir = Err
	Else
		createdebugdir = 0
	End If

End Function


Sub Main()
ShortMsgTxt=lcase(NT_MachineFolder) & ":NetShield:Virus-Found ERROR NULL"
	Dim Dnum#, Dtotal#
	Dim AgtMsg$, AgtError$
	Dim bMoreData As Boolean

	'create reference to OLE Object to interogate.
	Set NT = CreateObject("NetiQAgent.NT")
	'Create reference to specific element of OLE Object.
	Set OBJ = NT.System

	If DO_DEBUG  = "y" Then
		createret = createdebugdir	'Use Function to Create Directory if its not already there
		If FileExists("c:\NetIQ_KSdebug\" & KSName & ".txt") Then

			If filelen("c:\NetIQ_KSdebug\" & KSName & ".txt") > 512000 Then

				If FileExists("c:\NetIQ_KSdebug\" & KSName & ".old") Then
					kill "c:\NetIQ_KSdebug\" & KSName & ".old"
				End If

				Name "c:\NetIQ_KSdebug\" & KSName & ".txt" As "c:\NetIQ_KSdebug\" & KSName & ".old"

			End If
		End If

		Open "c:\NetIQ_KSdebug\" & KSName & ".txt" For Append Access Write As #2
	End If




	' Check to see if this is the first time this script is run
	' this is needed to set up Data headers for graph details, this is
	' only performed the first time the script is run.
	If IterationCount() = 1 Then
		RecNum = 0
		Iter = 1
		Occurences=0
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Set Up data Header : " & DataHeaderTxt
		End If

		' If the script is setup to capture data then the data header for the graphs
		' is set up
		If DO_DATA = "y" Then
			DataHeader DataHeaderTxt & UNITNUMBER, 0, 1
		End If

		' See Winnt.h for the bit field definition
		' Define bit field used to store type of event.
		Reptype = 0
		If TypeError = "y" Then
			Reptype = Reptype + 1
		End If
		If TypeWarning = "y" Then
			Reptype = Reptype + 2
		End If
		If TypeInformation = "y" Then
			Reptype = Reptype + 4
		End If
		If TypeSuccessAudit = "y" Then
			Reptype = Reptype + 8
		End If
		If TypeFailureAudit = "y" Then
			Reptype = Reptype + 16
		End If
		' Define the name of the resource that is used in this script.
		resname = "NT_MachineFolder = " & NT_MachineFolder
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Resource Name   :  " & resname
		End If

	End If
		
  	Dtotal = 0
	Flags = 3			' Want both AGTMSG and ERRMSG

' this label allows the procedure to be re-entered if there are more event log entries
' to be read.
ReadNext:

	'Inputs are Log, RecentHours, RepType, Source,
	'	Category, Event, User, Computer, Description, GroupFactor, RecNum, Flags (3)
	'Outputs are RecNum, AgtMsg, AgtError
	Dnum = OBJ.EventLog(Log, RecentHours, RepType, Source, Category, _
		Event, User, Computer, Description, GroupFactor, RecNum, AgtMsg, AgtError, 3)

	'If the Return from the value from reading the event log is -1 then there are
	'no entries that match the criteria and an error is raised to exit the script.
	If Dnum = -1 Then
		If DO_DEBUG  = "y" Then
			Print #2 , Now() & "        " &  "Error Occured Terminate Script : " 
			Print #2 , Now() & "        " &  "		" & AgtError
		End If

		Err.Description = AgtError
		Err.raise 4133	  'raise error to terminate this KS
	End If

	'if the return value from reading the event log is -2 then there is more events to be read
	'any other value is taken that there are no more events to be read.
	If Dnum = -2 Then
		bMoreData = TRUE
		Dnum = GroupFactor
	Else
		bMoreData = FALSE
	End If

	' this checks whether an event should be raised when the criterai for the script are meet.	
	If DO_EVENT = "y" Then
		
		If Dnum > 0 Then
			'This keeps a running total of how many occurances of an event have occured
			Occurences = Occurences+ Dnum
			' If the number of occurences have exceeded the threshold set for the script an
			' event is fired.
			If (Occurences = NoOccurances) Or (Occurences > NoOccurances) Then
				MSActions Severity,ShortMsgTxt, AKPID, resname, AgtMsg 
				If DO_DEBUG  = "y" Then
					Print #2 , Now() & "        " & "Short Message : " & ShortMsgTxt
				End If

				' the number of occurences are reset to zero once the event has been raised.
				' This allows the script to start again.
				Occurences=0
			End If
			Iter = Iter + 1
		End If
	End If

	
	Dtotal = Dtotal + Dnum
	' If there are more events to read the procedure is entered again.
	If bMoreData Then
		Flags = 2			' want only ERRMSG, i.e. don't want AGTMSG
		GoTo ReadNext
	End If

	' Graphing the total number of entries, but only the first GroupFactor in details
	If DO_DATA = "y" Then
    	DataLog 1, Dtotal, AgtMsg 	
	End If

If DO_DEBUG  = "y" Then
	Close #2
End If

End Sub


'### End KPS Section


